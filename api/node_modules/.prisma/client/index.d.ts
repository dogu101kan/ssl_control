
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Websites
 * 
 */
export type Websites = $Result.DefaultSelection<Prisma.$WebsitesPayload>
/**
 * Model SSLResults
 * 
 */
export type SSLResults = $Result.DefaultSelection<Prisma.$SSLResultsPayload>
/**
 * Model Mails
 * 
 */
export type Mails = $Result.DefaultSelection<Prisma.$MailsPayload>
/**
 * Model SSLProviders
 * 
 */
export type SSLProviders = $Result.DefaultSelection<Prisma.$SSLProvidersPayload>
/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Websites
 * const websites = await prisma.websites.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Websites
   * const websites = await prisma.websites.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.websites`: Exposes CRUD operations for the **Websites** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Websites
    * const websites = await prisma.websites.findMany()
    * ```
    */
  get websites(): Prisma.WebsitesDelegate<ExtArgs>;

  /**
   * `prisma.sSLResults`: Exposes CRUD operations for the **SSLResults** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SSLResults
    * const sSLResults = await prisma.sSLResults.findMany()
    * ```
    */
  get sSLResults(): Prisma.SSLResultsDelegate<ExtArgs>;

  /**
   * `prisma.mails`: Exposes CRUD operations for the **Mails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mails
    * const mails = await prisma.mails.findMany()
    * ```
    */
  get mails(): Prisma.MailsDelegate<ExtArgs>;

  /**
   * `prisma.sSLProviders`: Exposes CRUD operations for the **SSLProviders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SSLProviders
    * const sSLProviders = await prisma.sSLProviders.findMany()
    * ```
    */
  get sSLProviders(): Prisma.SSLProvidersDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Websites: 'Websites',
    SSLResults: 'SSLResults',
    Mails: 'Mails',
    SSLProviders: 'SSLProviders',
    Users: 'Users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'websites' | 'sSLResults' | 'mails' | 'sSLProviders' | 'users'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Websites: {
        payload: Prisma.$WebsitesPayload<ExtArgs>
        fields: Prisma.WebsitesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebsitesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsitesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebsitesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsitesPayload>
          }
          findFirst: {
            args: Prisma.WebsitesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsitesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebsitesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsitesPayload>
          }
          findMany: {
            args: Prisma.WebsitesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsitesPayload>[]
          }
          create: {
            args: Prisma.WebsitesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsitesPayload>
          }
          createMany: {
            args: Prisma.WebsitesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WebsitesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsitesPayload>
          }
          update: {
            args: Prisma.WebsitesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsitesPayload>
          }
          deleteMany: {
            args: Prisma.WebsitesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WebsitesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WebsitesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsitesPayload>
          }
          aggregate: {
            args: Prisma.WebsitesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWebsites>
          }
          groupBy: {
            args: Prisma.WebsitesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WebsitesGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebsitesCountArgs<ExtArgs>,
            result: $Utils.Optional<WebsitesCountAggregateOutputType> | number
          }
        }
      }
      SSLResults: {
        payload: Prisma.$SSLResultsPayload<ExtArgs>
        fields: Prisma.SSLResultsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SSLResultsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLResultsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SSLResultsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLResultsPayload>
          }
          findFirst: {
            args: Prisma.SSLResultsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLResultsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SSLResultsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLResultsPayload>
          }
          findMany: {
            args: Prisma.SSLResultsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLResultsPayload>[]
          }
          create: {
            args: Prisma.SSLResultsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLResultsPayload>
          }
          createMany: {
            args: Prisma.SSLResultsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SSLResultsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLResultsPayload>
          }
          update: {
            args: Prisma.SSLResultsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLResultsPayload>
          }
          deleteMany: {
            args: Prisma.SSLResultsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SSLResultsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SSLResultsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLResultsPayload>
          }
          aggregate: {
            args: Prisma.SSLResultsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSSLResults>
          }
          groupBy: {
            args: Prisma.SSLResultsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SSLResultsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SSLResultsCountArgs<ExtArgs>,
            result: $Utils.Optional<SSLResultsCountAggregateOutputType> | number
          }
        }
      }
      Mails: {
        payload: Prisma.$MailsPayload<ExtArgs>
        fields: Prisma.MailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MailsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MailsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MailsPayload>
          }
          findFirst: {
            args: Prisma.MailsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MailsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MailsPayload>
          }
          findMany: {
            args: Prisma.MailsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MailsPayload>[]
          }
          create: {
            args: Prisma.MailsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MailsPayload>
          }
          createMany: {
            args: Prisma.MailsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MailsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MailsPayload>
          }
          update: {
            args: Prisma.MailsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MailsPayload>
          }
          deleteMany: {
            args: Prisma.MailsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MailsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MailsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MailsPayload>
          }
          aggregate: {
            args: Prisma.MailsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMails>
          }
          groupBy: {
            args: Prisma.MailsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MailsCountArgs<ExtArgs>,
            result: $Utils.Optional<MailsCountAggregateOutputType> | number
          }
        }
      }
      SSLProviders: {
        payload: Prisma.$SSLProvidersPayload<ExtArgs>
        fields: Prisma.SSLProvidersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SSLProvidersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLProvidersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SSLProvidersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLProvidersPayload>
          }
          findFirst: {
            args: Prisma.SSLProvidersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLProvidersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SSLProvidersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLProvidersPayload>
          }
          findMany: {
            args: Prisma.SSLProvidersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLProvidersPayload>[]
          }
          create: {
            args: Prisma.SSLProvidersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLProvidersPayload>
          }
          createMany: {
            args: Prisma.SSLProvidersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SSLProvidersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLProvidersPayload>
          }
          update: {
            args: Prisma.SSLProvidersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLProvidersPayload>
          }
          deleteMany: {
            args: Prisma.SSLProvidersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SSLProvidersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SSLProvidersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SSLProvidersPayload>
          }
          aggregate: {
            args: Prisma.SSLProvidersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSSLProviders>
          }
          groupBy: {
            args: Prisma.SSLProvidersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SSLProvidersGroupByOutputType>[]
          }
          count: {
            args: Prisma.SSLProvidersCountArgs<ExtArgs>,
            result: $Utils.Optional<SSLProvidersCountAggregateOutputType> | number
          }
        }
      }
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type WebsitesCountOutputType
   */

  export type WebsitesCountOutputType = {
    sslResults: number
  }

  export type WebsitesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sslResults?: boolean | WebsitesCountOutputTypeCountSslResultsArgs
  }

  // Custom InputTypes

  /**
   * WebsitesCountOutputType without action
   */
  export type WebsitesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsitesCountOutputType
     */
    select?: WebsitesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * WebsitesCountOutputType without action
   */
  export type WebsitesCountOutputTypeCountSslResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SSLResultsWhereInput
  }



  /**
   * Count Type SSLProvidersCountOutputType
   */

  export type SSLProvidersCountOutputType = {
    websites: number
  }

  export type SSLProvidersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    websites?: boolean | SSLProvidersCountOutputTypeCountWebsitesArgs
  }

  // Custom InputTypes

  /**
   * SSLProvidersCountOutputType without action
   */
  export type SSLProvidersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLProvidersCountOutputType
     */
    select?: SSLProvidersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SSLProvidersCountOutputType without action
   */
  export type SSLProvidersCountOutputTypeCountWebsitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebsitesWhereInput
  }



  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    website: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    website?: boolean | UsersCountOutputTypeCountWebsiteArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountWebsiteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebsitesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Websites
   */

  export type AggregateWebsites = {
    _count: WebsitesCountAggregateOutputType | null
    _min: WebsitesMinAggregateOutputType | null
    _max: WebsitesMaxAggregateOutputType | null
  }

  export type WebsitesMinAggregateOutputType = {
    id: string | null
    link: string | null
    userId: string | null
    sslProviderId: string | null
  }

  export type WebsitesMaxAggregateOutputType = {
    id: string | null
    link: string | null
    userId: string | null
    sslProviderId: string | null
  }

  export type WebsitesCountAggregateOutputType = {
    id: number
    link: number
    userId: number
    sslProviderId: number
    _all: number
  }


  export type WebsitesMinAggregateInputType = {
    id?: true
    link?: true
    userId?: true
    sslProviderId?: true
  }

  export type WebsitesMaxAggregateInputType = {
    id?: true
    link?: true
    userId?: true
    sslProviderId?: true
  }

  export type WebsitesCountAggregateInputType = {
    id?: true
    link?: true
    userId?: true
    sslProviderId?: true
    _all?: true
  }

  export type WebsitesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Websites to aggregate.
     */
    where?: WebsitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Websites to fetch.
     */
    orderBy?: WebsitesOrderByWithRelationInput | WebsitesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebsitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Websites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Websites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Websites
    **/
    _count?: true | WebsitesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebsitesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebsitesMaxAggregateInputType
  }

  export type GetWebsitesAggregateType<T extends WebsitesAggregateArgs> = {
        [P in keyof T & keyof AggregateWebsites]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebsites[P]>
      : GetScalarType<T[P], AggregateWebsites[P]>
  }




  export type WebsitesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebsitesWhereInput
    orderBy?: WebsitesOrderByWithAggregationInput | WebsitesOrderByWithAggregationInput[]
    by: WebsitesScalarFieldEnum[] | WebsitesScalarFieldEnum
    having?: WebsitesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebsitesCountAggregateInputType | true
    _min?: WebsitesMinAggregateInputType
    _max?: WebsitesMaxAggregateInputType
  }

  export type WebsitesGroupByOutputType = {
    id: string
    link: string
    userId: string
    sslProviderId: string | null
    _count: WebsitesCountAggregateOutputType | null
    _min: WebsitesMinAggregateOutputType | null
    _max: WebsitesMaxAggregateOutputType | null
  }

  type GetWebsitesGroupByPayload<T extends WebsitesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebsitesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebsitesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebsitesGroupByOutputType[P]>
            : GetScalarType<T[P], WebsitesGroupByOutputType[P]>
        }
      >
    >


  export type WebsitesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    link?: boolean
    userId?: boolean
    sslProviderId?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    sslProvider?: boolean | Websites$sslProviderArgs<ExtArgs>
    sslResults?: boolean | Websites$sslResultsArgs<ExtArgs>
    _count?: boolean | WebsitesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["websites"]>

  export type WebsitesSelectScalar = {
    id?: boolean
    link?: boolean
    userId?: boolean
    sslProviderId?: boolean
  }

  export type WebsitesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    sslProvider?: boolean | Websites$sslProviderArgs<ExtArgs>
    sslResults?: boolean | Websites$sslResultsArgs<ExtArgs>
    _count?: boolean | WebsitesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $WebsitesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Websites"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      sslProvider: Prisma.$SSLProvidersPayload<ExtArgs> | null
      sslResults: Prisma.$SSLResultsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      link: string
      userId: string
      sslProviderId: string | null
    }, ExtArgs["result"]["websites"]>
    composites: {}
  }


  type WebsitesGetPayload<S extends boolean | null | undefined | WebsitesDefaultArgs> = $Result.GetResult<Prisma.$WebsitesPayload, S>

  type WebsitesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WebsitesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: WebsitesCountAggregateInputType | true
    }

  export interface WebsitesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Websites'], meta: { name: 'Websites' } }
    /**
     * Find zero or one Websites that matches the filter.
     * @param {WebsitesFindUniqueArgs} args - Arguments to find a Websites
     * @example
     * // Get one Websites
     * const websites = await prisma.websites.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WebsitesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WebsitesFindUniqueArgs<ExtArgs>>
    ): Prisma__WebsitesClient<$Result.GetResult<Prisma.$WebsitesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Websites that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WebsitesFindUniqueOrThrowArgs} args - Arguments to find a Websites
     * @example
     * // Get one Websites
     * const websites = await prisma.websites.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WebsitesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsitesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WebsitesClient<$Result.GetResult<Prisma.$WebsitesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Websites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsitesFindFirstArgs} args - Arguments to find a Websites
     * @example
     * // Get one Websites
     * const websites = await prisma.websites.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WebsitesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsitesFindFirstArgs<ExtArgs>>
    ): Prisma__WebsitesClient<$Result.GetResult<Prisma.$WebsitesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Websites that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsitesFindFirstOrThrowArgs} args - Arguments to find a Websites
     * @example
     * // Get one Websites
     * const websites = await prisma.websites.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WebsitesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsitesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WebsitesClient<$Result.GetResult<Prisma.$WebsitesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Websites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsitesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Websites
     * const websites = await prisma.websites.findMany()
     * 
     * // Get first 10 Websites
     * const websites = await prisma.websites.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const websitesWithIdOnly = await prisma.websites.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WebsitesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsitesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebsitesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Websites.
     * @param {WebsitesCreateArgs} args - Arguments to create a Websites.
     * @example
     * // Create one Websites
     * const Websites = await prisma.websites.create({
     *   data: {
     *     // ... data to create a Websites
     *   }
     * })
     * 
    **/
    create<T extends WebsitesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WebsitesCreateArgs<ExtArgs>>
    ): Prisma__WebsitesClient<$Result.GetResult<Prisma.$WebsitesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Websites.
     *     @param {WebsitesCreateManyArgs} args - Arguments to create many Websites.
     *     @example
     *     // Create many Websites
     *     const websites = await prisma.websites.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WebsitesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsitesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Websites.
     * @param {WebsitesDeleteArgs} args - Arguments to delete one Websites.
     * @example
     * // Delete one Websites
     * const Websites = await prisma.websites.delete({
     *   where: {
     *     // ... filter to delete one Websites
     *   }
     * })
     * 
    **/
    delete<T extends WebsitesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WebsitesDeleteArgs<ExtArgs>>
    ): Prisma__WebsitesClient<$Result.GetResult<Prisma.$WebsitesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Websites.
     * @param {WebsitesUpdateArgs} args - Arguments to update one Websites.
     * @example
     * // Update one Websites
     * const websites = await prisma.websites.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WebsitesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WebsitesUpdateArgs<ExtArgs>>
    ): Prisma__WebsitesClient<$Result.GetResult<Prisma.$WebsitesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Websites.
     * @param {WebsitesDeleteManyArgs} args - Arguments to filter Websites to delete.
     * @example
     * // Delete a few Websites
     * const { count } = await prisma.websites.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WebsitesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsitesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Websites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsitesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Websites
     * const websites = await prisma.websites.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WebsitesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WebsitesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Websites.
     * @param {WebsitesUpsertArgs} args - Arguments to update or create a Websites.
     * @example
     * // Update or create a Websites
     * const websites = await prisma.websites.upsert({
     *   create: {
     *     // ... data to create a Websites
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Websites we want to update
     *   }
     * })
    **/
    upsert<T extends WebsitesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WebsitesUpsertArgs<ExtArgs>>
    ): Prisma__WebsitesClient<$Result.GetResult<Prisma.$WebsitesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Websites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsitesCountArgs} args - Arguments to filter Websites to count.
     * @example
     * // Count the number of Websites
     * const count = await prisma.websites.count({
     *   where: {
     *     // ... the filter for the Websites we want to count
     *   }
     * })
    **/
    count<T extends WebsitesCountArgs>(
      args?: Subset<T, WebsitesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebsitesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Websites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsitesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebsitesAggregateArgs>(args: Subset<T, WebsitesAggregateArgs>): Prisma.PrismaPromise<GetWebsitesAggregateType<T>>

    /**
     * Group by Websites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsitesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebsitesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebsitesGroupByArgs['orderBy'] }
        : { orderBy?: WebsitesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebsitesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebsitesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Websites model
   */
  readonly fields: WebsitesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Websites.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebsitesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    sslProvider<T extends Websites$sslProviderArgs<ExtArgs> = {}>(args?: Subset<T, Websites$sslProviderArgs<ExtArgs>>): Prisma__SSLProvidersClient<$Result.GetResult<Prisma.$SSLProvidersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    sslResults<T extends Websites$sslResultsArgs<ExtArgs> = {}>(args?: Subset<T, Websites$sslResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SSLResultsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Websites model
   */ 
  interface WebsitesFieldRefs {
    readonly id: FieldRef<"Websites", 'String'>
    readonly link: FieldRef<"Websites", 'String'>
    readonly userId: FieldRef<"Websites", 'String'>
    readonly sslProviderId: FieldRef<"Websites", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Websites findUnique
   */
  export type WebsitesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Websites
     */
    select?: WebsitesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsitesInclude<ExtArgs> | null
    /**
     * Filter, which Websites to fetch.
     */
    where: WebsitesWhereUniqueInput
  }


  /**
   * Websites findUniqueOrThrow
   */
  export type WebsitesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Websites
     */
    select?: WebsitesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsitesInclude<ExtArgs> | null
    /**
     * Filter, which Websites to fetch.
     */
    where: WebsitesWhereUniqueInput
  }


  /**
   * Websites findFirst
   */
  export type WebsitesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Websites
     */
    select?: WebsitesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsitesInclude<ExtArgs> | null
    /**
     * Filter, which Websites to fetch.
     */
    where?: WebsitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Websites to fetch.
     */
    orderBy?: WebsitesOrderByWithRelationInput | WebsitesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Websites.
     */
    cursor?: WebsitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Websites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Websites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Websites.
     */
    distinct?: WebsitesScalarFieldEnum | WebsitesScalarFieldEnum[]
  }


  /**
   * Websites findFirstOrThrow
   */
  export type WebsitesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Websites
     */
    select?: WebsitesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsitesInclude<ExtArgs> | null
    /**
     * Filter, which Websites to fetch.
     */
    where?: WebsitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Websites to fetch.
     */
    orderBy?: WebsitesOrderByWithRelationInput | WebsitesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Websites.
     */
    cursor?: WebsitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Websites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Websites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Websites.
     */
    distinct?: WebsitesScalarFieldEnum | WebsitesScalarFieldEnum[]
  }


  /**
   * Websites findMany
   */
  export type WebsitesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Websites
     */
    select?: WebsitesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsitesInclude<ExtArgs> | null
    /**
     * Filter, which Websites to fetch.
     */
    where?: WebsitesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Websites to fetch.
     */
    orderBy?: WebsitesOrderByWithRelationInput | WebsitesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Websites.
     */
    cursor?: WebsitesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Websites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Websites.
     */
    skip?: number
    distinct?: WebsitesScalarFieldEnum | WebsitesScalarFieldEnum[]
  }


  /**
   * Websites create
   */
  export type WebsitesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Websites
     */
    select?: WebsitesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsitesInclude<ExtArgs> | null
    /**
     * The data needed to create a Websites.
     */
    data: XOR<WebsitesCreateInput, WebsitesUncheckedCreateInput>
  }


  /**
   * Websites createMany
   */
  export type WebsitesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Websites.
     */
    data: WebsitesCreateManyInput | WebsitesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Websites update
   */
  export type WebsitesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Websites
     */
    select?: WebsitesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsitesInclude<ExtArgs> | null
    /**
     * The data needed to update a Websites.
     */
    data: XOR<WebsitesUpdateInput, WebsitesUncheckedUpdateInput>
    /**
     * Choose, which Websites to update.
     */
    where: WebsitesWhereUniqueInput
  }


  /**
   * Websites updateMany
   */
  export type WebsitesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Websites.
     */
    data: XOR<WebsitesUpdateManyMutationInput, WebsitesUncheckedUpdateManyInput>
    /**
     * Filter which Websites to update
     */
    where?: WebsitesWhereInput
  }


  /**
   * Websites upsert
   */
  export type WebsitesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Websites
     */
    select?: WebsitesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsitesInclude<ExtArgs> | null
    /**
     * The filter to search for the Websites to update in case it exists.
     */
    where: WebsitesWhereUniqueInput
    /**
     * In case the Websites found by the `where` argument doesn't exist, create a new Websites with this data.
     */
    create: XOR<WebsitesCreateInput, WebsitesUncheckedCreateInput>
    /**
     * In case the Websites was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebsitesUpdateInput, WebsitesUncheckedUpdateInput>
  }


  /**
   * Websites delete
   */
  export type WebsitesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Websites
     */
    select?: WebsitesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsitesInclude<ExtArgs> | null
    /**
     * Filter which Websites to delete.
     */
    where: WebsitesWhereUniqueInput
  }


  /**
   * Websites deleteMany
   */
  export type WebsitesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Websites to delete
     */
    where?: WebsitesWhereInput
  }


  /**
   * Websites.sslProvider
   */
  export type Websites$sslProviderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLProviders
     */
    select?: SSLProvidersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLProvidersInclude<ExtArgs> | null
    where?: SSLProvidersWhereInput
  }


  /**
   * Websites.sslResults
   */
  export type Websites$sslResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLResults
     */
    select?: SSLResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLResultsInclude<ExtArgs> | null
    where?: SSLResultsWhereInput
    orderBy?: SSLResultsOrderByWithRelationInput | SSLResultsOrderByWithRelationInput[]
    cursor?: SSLResultsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SSLResultsScalarFieldEnum | SSLResultsScalarFieldEnum[]
  }


  /**
   * Websites without action
   */
  export type WebsitesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Websites
     */
    select?: WebsitesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsitesInclude<ExtArgs> | null
  }



  /**
   * Model SSLResults
   */

  export type AggregateSSLResults = {
    _count: SSLResultsCountAggregateOutputType | null
    _min: SSLResultsMinAggregateOutputType | null
    _max: SSLResultsMaxAggregateOutputType | null
  }

  export type SSLResultsMinAggregateOutputType = {
    id: string | null
    websiteId: string | null
    validFrom: string | null
    validTo: string | null
    fingerPrint: string | null
    serialNumber: string | null
    createdAt: Date | null
  }

  export type SSLResultsMaxAggregateOutputType = {
    id: string | null
    websiteId: string | null
    validFrom: string | null
    validTo: string | null
    fingerPrint: string | null
    serialNumber: string | null
    createdAt: Date | null
  }

  export type SSLResultsCountAggregateOutputType = {
    id: number
    websiteId: number
    validFrom: number
    validTo: number
    fingerPrint: number
    serialNumber: number
    infoAccess: number
    createdAt: number
    _all: number
  }


  export type SSLResultsMinAggregateInputType = {
    id?: true
    websiteId?: true
    validFrom?: true
    validTo?: true
    fingerPrint?: true
    serialNumber?: true
    createdAt?: true
  }

  export type SSLResultsMaxAggregateInputType = {
    id?: true
    websiteId?: true
    validFrom?: true
    validTo?: true
    fingerPrint?: true
    serialNumber?: true
    createdAt?: true
  }

  export type SSLResultsCountAggregateInputType = {
    id?: true
    websiteId?: true
    validFrom?: true
    validTo?: true
    fingerPrint?: true
    serialNumber?: true
    infoAccess?: true
    createdAt?: true
    _all?: true
  }

  export type SSLResultsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SSLResults to aggregate.
     */
    where?: SSLResultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SSLResults to fetch.
     */
    orderBy?: SSLResultsOrderByWithRelationInput | SSLResultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SSLResultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SSLResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SSLResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SSLResults
    **/
    _count?: true | SSLResultsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SSLResultsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SSLResultsMaxAggregateInputType
  }

  export type GetSSLResultsAggregateType<T extends SSLResultsAggregateArgs> = {
        [P in keyof T & keyof AggregateSSLResults]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSSLResults[P]>
      : GetScalarType<T[P], AggregateSSLResults[P]>
  }




  export type SSLResultsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SSLResultsWhereInput
    orderBy?: SSLResultsOrderByWithAggregationInput | SSLResultsOrderByWithAggregationInput[]
    by: SSLResultsScalarFieldEnum[] | SSLResultsScalarFieldEnum
    having?: SSLResultsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SSLResultsCountAggregateInputType | true
    _min?: SSLResultsMinAggregateInputType
    _max?: SSLResultsMaxAggregateInputType
  }

  export type SSLResultsGroupByOutputType = {
    id: string
    websiteId: string
    validFrom: string
    validTo: string
    fingerPrint: string
    serialNumber: string
    infoAccess: JsonValue
    createdAt: Date
    _count: SSLResultsCountAggregateOutputType | null
    _min: SSLResultsMinAggregateOutputType | null
    _max: SSLResultsMaxAggregateOutputType | null
  }

  type GetSSLResultsGroupByPayload<T extends SSLResultsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SSLResultsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SSLResultsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SSLResultsGroupByOutputType[P]>
            : GetScalarType<T[P], SSLResultsGroupByOutputType[P]>
        }
      >
    >


  export type SSLResultsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    websiteId?: boolean
    validFrom?: boolean
    validTo?: boolean
    fingerPrint?: boolean
    serialNumber?: boolean
    infoAccess?: boolean
    createdAt?: boolean
    website?: boolean | WebsitesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sSLResults"]>

  export type SSLResultsSelectScalar = {
    id?: boolean
    websiteId?: boolean
    validFrom?: boolean
    validTo?: boolean
    fingerPrint?: boolean
    serialNumber?: boolean
    infoAccess?: boolean
    createdAt?: boolean
  }

  export type SSLResultsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    website?: boolean | WebsitesDefaultArgs<ExtArgs>
  }


  export type $SSLResultsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SSLResults"
    objects: {
      website: Prisma.$WebsitesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      websiteId: string
      validFrom: string
      validTo: string
      fingerPrint: string
      serialNumber: string
      infoAccess: Prisma.JsonValue
      createdAt: Date
    }, ExtArgs["result"]["sSLResults"]>
    composites: {}
  }


  type SSLResultsGetPayload<S extends boolean | null | undefined | SSLResultsDefaultArgs> = $Result.GetResult<Prisma.$SSLResultsPayload, S>

  type SSLResultsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SSLResultsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SSLResultsCountAggregateInputType | true
    }

  export interface SSLResultsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SSLResults'], meta: { name: 'SSLResults' } }
    /**
     * Find zero or one SSLResults that matches the filter.
     * @param {SSLResultsFindUniqueArgs} args - Arguments to find a SSLResults
     * @example
     * // Get one SSLResults
     * const sSLResults = await prisma.sSLResults.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SSLResultsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SSLResultsFindUniqueArgs<ExtArgs>>
    ): Prisma__SSLResultsClient<$Result.GetResult<Prisma.$SSLResultsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SSLResults that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SSLResultsFindUniqueOrThrowArgs} args - Arguments to find a SSLResults
     * @example
     * // Get one SSLResults
     * const sSLResults = await prisma.sSLResults.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SSLResultsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SSLResultsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SSLResultsClient<$Result.GetResult<Prisma.$SSLResultsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SSLResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLResultsFindFirstArgs} args - Arguments to find a SSLResults
     * @example
     * // Get one SSLResults
     * const sSLResults = await prisma.sSLResults.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SSLResultsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SSLResultsFindFirstArgs<ExtArgs>>
    ): Prisma__SSLResultsClient<$Result.GetResult<Prisma.$SSLResultsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SSLResults that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLResultsFindFirstOrThrowArgs} args - Arguments to find a SSLResults
     * @example
     * // Get one SSLResults
     * const sSLResults = await prisma.sSLResults.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SSLResultsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SSLResultsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SSLResultsClient<$Result.GetResult<Prisma.$SSLResultsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SSLResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLResultsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SSLResults
     * const sSLResults = await prisma.sSLResults.findMany()
     * 
     * // Get first 10 SSLResults
     * const sSLResults = await prisma.sSLResults.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sSLResultsWithIdOnly = await prisma.sSLResults.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SSLResultsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SSLResultsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SSLResultsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SSLResults.
     * @param {SSLResultsCreateArgs} args - Arguments to create a SSLResults.
     * @example
     * // Create one SSLResults
     * const SSLResults = await prisma.sSLResults.create({
     *   data: {
     *     // ... data to create a SSLResults
     *   }
     * })
     * 
    **/
    create<T extends SSLResultsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SSLResultsCreateArgs<ExtArgs>>
    ): Prisma__SSLResultsClient<$Result.GetResult<Prisma.$SSLResultsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SSLResults.
     *     @param {SSLResultsCreateManyArgs} args - Arguments to create many SSLResults.
     *     @example
     *     // Create many SSLResults
     *     const sSLResults = await prisma.sSLResults.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SSLResultsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SSLResultsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SSLResults.
     * @param {SSLResultsDeleteArgs} args - Arguments to delete one SSLResults.
     * @example
     * // Delete one SSLResults
     * const SSLResults = await prisma.sSLResults.delete({
     *   where: {
     *     // ... filter to delete one SSLResults
     *   }
     * })
     * 
    **/
    delete<T extends SSLResultsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SSLResultsDeleteArgs<ExtArgs>>
    ): Prisma__SSLResultsClient<$Result.GetResult<Prisma.$SSLResultsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SSLResults.
     * @param {SSLResultsUpdateArgs} args - Arguments to update one SSLResults.
     * @example
     * // Update one SSLResults
     * const sSLResults = await prisma.sSLResults.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SSLResultsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SSLResultsUpdateArgs<ExtArgs>>
    ): Prisma__SSLResultsClient<$Result.GetResult<Prisma.$SSLResultsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SSLResults.
     * @param {SSLResultsDeleteManyArgs} args - Arguments to filter SSLResults to delete.
     * @example
     * // Delete a few SSLResults
     * const { count } = await prisma.sSLResults.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SSLResultsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SSLResultsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SSLResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLResultsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SSLResults
     * const sSLResults = await prisma.sSLResults.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SSLResultsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SSLResultsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SSLResults.
     * @param {SSLResultsUpsertArgs} args - Arguments to update or create a SSLResults.
     * @example
     * // Update or create a SSLResults
     * const sSLResults = await prisma.sSLResults.upsert({
     *   create: {
     *     // ... data to create a SSLResults
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SSLResults we want to update
     *   }
     * })
    **/
    upsert<T extends SSLResultsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SSLResultsUpsertArgs<ExtArgs>>
    ): Prisma__SSLResultsClient<$Result.GetResult<Prisma.$SSLResultsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SSLResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLResultsCountArgs} args - Arguments to filter SSLResults to count.
     * @example
     * // Count the number of SSLResults
     * const count = await prisma.sSLResults.count({
     *   where: {
     *     // ... the filter for the SSLResults we want to count
     *   }
     * })
    **/
    count<T extends SSLResultsCountArgs>(
      args?: Subset<T, SSLResultsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SSLResultsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SSLResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLResultsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SSLResultsAggregateArgs>(args: Subset<T, SSLResultsAggregateArgs>): Prisma.PrismaPromise<GetSSLResultsAggregateType<T>>

    /**
     * Group by SSLResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLResultsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SSLResultsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SSLResultsGroupByArgs['orderBy'] }
        : { orderBy?: SSLResultsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SSLResultsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSSLResultsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SSLResults model
   */
  readonly fields: SSLResultsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SSLResults.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SSLResultsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    website<T extends WebsitesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WebsitesDefaultArgs<ExtArgs>>): Prisma__WebsitesClient<$Result.GetResult<Prisma.$WebsitesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SSLResults model
   */ 
  interface SSLResultsFieldRefs {
    readonly id: FieldRef<"SSLResults", 'String'>
    readonly websiteId: FieldRef<"SSLResults", 'String'>
    readonly validFrom: FieldRef<"SSLResults", 'String'>
    readonly validTo: FieldRef<"SSLResults", 'String'>
    readonly fingerPrint: FieldRef<"SSLResults", 'String'>
    readonly serialNumber: FieldRef<"SSLResults", 'String'>
    readonly infoAccess: FieldRef<"SSLResults", 'Json'>
    readonly createdAt: FieldRef<"SSLResults", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * SSLResults findUnique
   */
  export type SSLResultsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLResults
     */
    select?: SSLResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLResultsInclude<ExtArgs> | null
    /**
     * Filter, which SSLResults to fetch.
     */
    where: SSLResultsWhereUniqueInput
  }


  /**
   * SSLResults findUniqueOrThrow
   */
  export type SSLResultsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLResults
     */
    select?: SSLResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLResultsInclude<ExtArgs> | null
    /**
     * Filter, which SSLResults to fetch.
     */
    where: SSLResultsWhereUniqueInput
  }


  /**
   * SSLResults findFirst
   */
  export type SSLResultsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLResults
     */
    select?: SSLResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLResultsInclude<ExtArgs> | null
    /**
     * Filter, which SSLResults to fetch.
     */
    where?: SSLResultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SSLResults to fetch.
     */
    orderBy?: SSLResultsOrderByWithRelationInput | SSLResultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SSLResults.
     */
    cursor?: SSLResultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SSLResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SSLResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SSLResults.
     */
    distinct?: SSLResultsScalarFieldEnum | SSLResultsScalarFieldEnum[]
  }


  /**
   * SSLResults findFirstOrThrow
   */
  export type SSLResultsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLResults
     */
    select?: SSLResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLResultsInclude<ExtArgs> | null
    /**
     * Filter, which SSLResults to fetch.
     */
    where?: SSLResultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SSLResults to fetch.
     */
    orderBy?: SSLResultsOrderByWithRelationInput | SSLResultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SSLResults.
     */
    cursor?: SSLResultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SSLResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SSLResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SSLResults.
     */
    distinct?: SSLResultsScalarFieldEnum | SSLResultsScalarFieldEnum[]
  }


  /**
   * SSLResults findMany
   */
  export type SSLResultsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLResults
     */
    select?: SSLResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLResultsInclude<ExtArgs> | null
    /**
     * Filter, which SSLResults to fetch.
     */
    where?: SSLResultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SSLResults to fetch.
     */
    orderBy?: SSLResultsOrderByWithRelationInput | SSLResultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SSLResults.
     */
    cursor?: SSLResultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SSLResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SSLResults.
     */
    skip?: number
    distinct?: SSLResultsScalarFieldEnum | SSLResultsScalarFieldEnum[]
  }


  /**
   * SSLResults create
   */
  export type SSLResultsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLResults
     */
    select?: SSLResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLResultsInclude<ExtArgs> | null
    /**
     * The data needed to create a SSLResults.
     */
    data: XOR<SSLResultsCreateInput, SSLResultsUncheckedCreateInput>
  }


  /**
   * SSLResults createMany
   */
  export type SSLResultsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SSLResults.
     */
    data: SSLResultsCreateManyInput | SSLResultsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SSLResults update
   */
  export type SSLResultsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLResults
     */
    select?: SSLResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLResultsInclude<ExtArgs> | null
    /**
     * The data needed to update a SSLResults.
     */
    data: XOR<SSLResultsUpdateInput, SSLResultsUncheckedUpdateInput>
    /**
     * Choose, which SSLResults to update.
     */
    where: SSLResultsWhereUniqueInput
  }


  /**
   * SSLResults updateMany
   */
  export type SSLResultsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SSLResults.
     */
    data: XOR<SSLResultsUpdateManyMutationInput, SSLResultsUncheckedUpdateManyInput>
    /**
     * Filter which SSLResults to update
     */
    where?: SSLResultsWhereInput
  }


  /**
   * SSLResults upsert
   */
  export type SSLResultsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLResults
     */
    select?: SSLResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLResultsInclude<ExtArgs> | null
    /**
     * The filter to search for the SSLResults to update in case it exists.
     */
    where: SSLResultsWhereUniqueInput
    /**
     * In case the SSLResults found by the `where` argument doesn't exist, create a new SSLResults with this data.
     */
    create: XOR<SSLResultsCreateInput, SSLResultsUncheckedCreateInput>
    /**
     * In case the SSLResults was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SSLResultsUpdateInput, SSLResultsUncheckedUpdateInput>
  }


  /**
   * SSLResults delete
   */
  export type SSLResultsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLResults
     */
    select?: SSLResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLResultsInclude<ExtArgs> | null
    /**
     * Filter which SSLResults to delete.
     */
    where: SSLResultsWhereUniqueInput
  }


  /**
   * SSLResults deleteMany
   */
  export type SSLResultsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SSLResults to delete
     */
    where?: SSLResultsWhereInput
  }


  /**
   * SSLResults without action
   */
  export type SSLResultsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLResults
     */
    select?: SSLResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLResultsInclude<ExtArgs> | null
  }



  /**
   * Model Mails
   */

  export type AggregateMails = {
    _count: MailsCountAggregateOutputType | null
    _min: MailsMinAggregateOutputType | null
    _max: MailsMaxAggregateOutputType | null
  }

  export type MailsMinAggregateOutputType = {
    id: string | null
    mail: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type MailsMaxAggregateOutputType = {
    id: string | null
    mail: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type MailsCountAggregateOutputType = {
    id: number
    mail: number
    userId: number
    createdAt: number
    _all: number
  }


  export type MailsMinAggregateInputType = {
    id?: true
    mail?: true
    userId?: true
    createdAt?: true
  }

  export type MailsMaxAggregateInputType = {
    id?: true
    mail?: true
    userId?: true
    createdAt?: true
  }

  export type MailsCountAggregateInputType = {
    id?: true
    mail?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type MailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mails to aggregate.
     */
    where?: MailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mails to fetch.
     */
    orderBy?: MailsOrderByWithRelationInput | MailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mails
    **/
    _count?: true | MailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MailsMaxAggregateInputType
  }

  export type GetMailsAggregateType<T extends MailsAggregateArgs> = {
        [P in keyof T & keyof AggregateMails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMails[P]>
      : GetScalarType<T[P], AggregateMails[P]>
  }




  export type MailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MailsWhereInput
    orderBy?: MailsOrderByWithAggregationInput | MailsOrderByWithAggregationInput[]
    by: MailsScalarFieldEnum[] | MailsScalarFieldEnum
    having?: MailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MailsCountAggregateInputType | true
    _min?: MailsMinAggregateInputType
    _max?: MailsMaxAggregateInputType
  }

  export type MailsGroupByOutputType = {
    id: string
    mail: string
    userId: string
    createdAt: Date
    _count: MailsCountAggregateOutputType | null
    _min: MailsMinAggregateOutputType | null
    _max: MailsMaxAggregateOutputType | null
  }

  type GetMailsGroupByPayload<T extends MailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MailsGroupByOutputType[P]>
            : GetScalarType<T[P], MailsGroupByOutputType[P]>
        }
      >
    >


  export type MailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mail?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mails"]>

  export type MailsSelectScalar = {
    id?: boolean
    mail?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type MailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $MailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mails"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mail: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["mails"]>
    composites: {}
  }


  type MailsGetPayload<S extends boolean | null | undefined | MailsDefaultArgs> = $Result.GetResult<Prisma.$MailsPayload, S>

  type MailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MailsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: MailsCountAggregateInputType | true
    }

  export interface MailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mails'], meta: { name: 'Mails' } }
    /**
     * Find zero or one Mails that matches the filter.
     * @param {MailsFindUniqueArgs} args - Arguments to find a Mails
     * @example
     * // Get one Mails
     * const mails = await prisma.mails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MailsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MailsFindUniqueArgs<ExtArgs>>
    ): Prisma__MailsClient<$Result.GetResult<Prisma.$MailsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Mails that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MailsFindUniqueOrThrowArgs} args - Arguments to find a Mails
     * @example
     * // Get one Mails
     * const mails = await prisma.mails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MailsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MailsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MailsClient<$Result.GetResult<Prisma.$MailsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Mails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailsFindFirstArgs} args - Arguments to find a Mails
     * @example
     * // Get one Mails
     * const mails = await prisma.mails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MailsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MailsFindFirstArgs<ExtArgs>>
    ): Prisma__MailsClient<$Result.GetResult<Prisma.$MailsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Mails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailsFindFirstOrThrowArgs} args - Arguments to find a Mails
     * @example
     * // Get one Mails
     * const mails = await prisma.mails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MailsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MailsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MailsClient<$Result.GetResult<Prisma.$MailsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Mails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mails
     * const mails = await prisma.mails.findMany()
     * 
     * // Get first 10 Mails
     * const mails = await prisma.mails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mailsWithIdOnly = await prisma.mails.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MailsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MailsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MailsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Mails.
     * @param {MailsCreateArgs} args - Arguments to create a Mails.
     * @example
     * // Create one Mails
     * const Mails = await prisma.mails.create({
     *   data: {
     *     // ... data to create a Mails
     *   }
     * })
     * 
    **/
    create<T extends MailsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MailsCreateArgs<ExtArgs>>
    ): Prisma__MailsClient<$Result.GetResult<Prisma.$MailsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Mails.
     *     @param {MailsCreateManyArgs} args - Arguments to create many Mails.
     *     @example
     *     // Create many Mails
     *     const mails = await prisma.mails.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MailsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MailsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mails.
     * @param {MailsDeleteArgs} args - Arguments to delete one Mails.
     * @example
     * // Delete one Mails
     * const Mails = await prisma.mails.delete({
     *   where: {
     *     // ... filter to delete one Mails
     *   }
     * })
     * 
    **/
    delete<T extends MailsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MailsDeleteArgs<ExtArgs>>
    ): Prisma__MailsClient<$Result.GetResult<Prisma.$MailsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Mails.
     * @param {MailsUpdateArgs} args - Arguments to update one Mails.
     * @example
     * // Update one Mails
     * const mails = await prisma.mails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MailsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MailsUpdateArgs<ExtArgs>>
    ): Prisma__MailsClient<$Result.GetResult<Prisma.$MailsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Mails.
     * @param {MailsDeleteManyArgs} args - Arguments to filter Mails to delete.
     * @example
     * // Delete a few Mails
     * const { count } = await prisma.mails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MailsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MailsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mails
     * const mails = await prisma.mails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MailsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MailsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mails.
     * @param {MailsUpsertArgs} args - Arguments to update or create a Mails.
     * @example
     * // Update or create a Mails
     * const mails = await prisma.mails.upsert({
     *   create: {
     *     // ... data to create a Mails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mails we want to update
     *   }
     * })
    **/
    upsert<T extends MailsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MailsUpsertArgs<ExtArgs>>
    ): Prisma__MailsClient<$Result.GetResult<Prisma.$MailsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Mails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailsCountArgs} args - Arguments to filter Mails to count.
     * @example
     * // Count the number of Mails
     * const count = await prisma.mails.count({
     *   where: {
     *     // ... the filter for the Mails we want to count
     *   }
     * })
    **/
    count<T extends MailsCountArgs>(
      args?: Subset<T, MailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MailsAggregateArgs>(args: Subset<T, MailsAggregateArgs>): Prisma.PrismaPromise<GetMailsAggregateType<T>>

    /**
     * Group by Mails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MailsGroupByArgs['orderBy'] }
        : { orderBy?: MailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mails model
   */
  readonly fields: MailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Mails model
   */ 
  interface MailsFieldRefs {
    readonly id: FieldRef<"Mails", 'String'>
    readonly mail: FieldRef<"Mails", 'String'>
    readonly userId: FieldRef<"Mails", 'String'>
    readonly createdAt: FieldRef<"Mails", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Mails findUnique
   */
  export type MailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mails
     */
    select?: MailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MailsInclude<ExtArgs> | null
    /**
     * Filter, which Mails to fetch.
     */
    where: MailsWhereUniqueInput
  }


  /**
   * Mails findUniqueOrThrow
   */
  export type MailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mails
     */
    select?: MailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MailsInclude<ExtArgs> | null
    /**
     * Filter, which Mails to fetch.
     */
    where: MailsWhereUniqueInput
  }


  /**
   * Mails findFirst
   */
  export type MailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mails
     */
    select?: MailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MailsInclude<ExtArgs> | null
    /**
     * Filter, which Mails to fetch.
     */
    where?: MailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mails to fetch.
     */
    orderBy?: MailsOrderByWithRelationInput | MailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mails.
     */
    cursor?: MailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mails.
     */
    distinct?: MailsScalarFieldEnum | MailsScalarFieldEnum[]
  }


  /**
   * Mails findFirstOrThrow
   */
  export type MailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mails
     */
    select?: MailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MailsInclude<ExtArgs> | null
    /**
     * Filter, which Mails to fetch.
     */
    where?: MailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mails to fetch.
     */
    orderBy?: MailsOrderByWithRelationInput | MailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mails.
     */
    cursor?: MailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mails.
     */
    distinct?: MailsScalarFieldEnum | MailsScalarFieldEnum[]
  }


  /**
   * Mails findMany
   */
  export type MailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mails
     */
    select?: MailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MailsInclude<ExtArgs> | null
    /**
     * Filter, which Mails to fetch.
     */
    where?: MailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mails to fetch.
     */
    orderBy?: MailsOrderByWithRelationInput | MailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mails.
     */
    cursor?: MailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mails.
     */
    skip?: number
    distinct?: MailsScalarFieldEnum | MailsScalarFieldEnum[]
  }


  /**
   * Mails create
   */
  export type MailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mails
     */
    select?: MailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MailsInclude<ExtArgs> | null
    /**
     * The data needed to create a Mails.
     */
    data: XOR<MailsCreateInput, MailsUncheckedCreateInput>
  }


  /**
   * Mails createMany
   */
  export type MailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mails.
     */
    data: MailsCreateManyInput | MailsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Mails update
   */
  export type MailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mails
     */
    select?: MailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MailsInclude<ExtArgs> | null
    /**
     * The data needed to update a Mails.
     */
    data: XOR<MailsUpdateInput, MailsUncheckedUpdateInput>
    /**
     * Choose, which Mails to update.
     */
    where: MailsWhereUniqueInput
  }


  /**
   * Mails updateMany
   */
  export type MailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mails.
     */
    data: XOR<MailsUpdateManyMutationInput, MailsUncheckedUpdateManyInput>
    /**
     * Filter which Mails to update
     */
    where?: MailsWhereInput
  }


  /**
   * Mails upsert
   */
  export type MailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mails
     */
    select?: MailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MailsInclude<ExtArgs> | null
    /**
     * The filter to search for the Mails to update in case it exists.
     */
    where: MailsWhereUniqueInput
    /**
     * In case the Mails found by the `where` argument doesn't exist, create a new Mails with this data.
     */
    create: XOR<MailsCreateInput, MailsUncheckedCreateInput>
    /**
     * In case the Mails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MailsUpdateInput, MailsUncheckedUpdateInput>
  }


  /**
   * Mails delete
   */
  export type MailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mails
     */
    select?: MailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MailsInclude<ExtArgs> | null
    /**
     * Filter which Mails to delete.
     */
    where: MailsWhereUniqueInput
  }


  /**
   * Mails deleteMany
   */
  export type MailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mails to delete
     */
    where?: MailsWhereInput
  }


  /**
   * Mails without action
   */
  export type MailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mails
     */
    select?: MailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MailsInclude<ExtArgs> | null
  }



  /**
   * Model SSLProviders
   */

  export type AggregateSSLProviders = {
    _count: SSLProvidersCountAggregateOutputType | null
    _min: SSLProvidersMinAggregateOutputType | null
    _max: SSLProvidersMaxAggregateOutputType | null
  }

  export type SSLProvidersMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type SSLProvidersMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type SSLProvidersCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type SSLProvidersMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type SSLProvidersMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type SSLProvidersCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type SSLProvidersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SSLProviders to aggregate.
     */
    where?: SSLProvidersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SSLProviders to fetch.
     */
    orderBy?: SSLProvidersOrderByWithRelationInput | SSLProvidersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SSLProvidersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SSLProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SSLProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SSLProviders
    **/
    _count?: true | SSLProvidersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SSLProvidersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SSLProvidersMaxAggregateInputType
  }

  export type GetSSLProvidersAggregateType<T extends SSLProvidersAggregateArgs> = {
        [P in keyof T & keyof AggregateSSLProviders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSSLProviders[P]>
      : GetScalarType<T[P], AggregateSSLProviders[P]>
  }




  export type SSLProvidersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SSLProvidersWhereInput
    orderBy?: SSLProvidersOrderByWithAggregationInput | SSLProvidersOrderByWithAggregationInput[]
    by: SSLProvidersScalarFieldEnum[] | SSLProvidersScalarFieldEnum
    having?: SSLProvidersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SSLProvidersCountAggregateInputType | true
    _min?: SSLProvidersMinAggregateInputType
    _max?: SSLProvidersMaxAggregateInputType
  }

  export type SSLProvidersGroupByOutputType = {
    id: string
    name: string
    _count: SSLProvidersCountAggregateOutputType | null
    _min: SSLProvidersMinAggregateOutputType | null
    _max: SSLProvidersMaxAggregateOutputType | null
  }

  type GetSSLProvidersGroupByPayload<T extends SSLProvidersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SSLProvidersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SSLProvidersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SSLProvidersGroupByOutputType[P]>
            : GetScalarType<T[P], SSLProvidersGroupByOutputType[P]>
        }
      >
    >


  export type SSLProvidersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    websites?: boolean | SSLProviders$websitesArgs<ExtArgs>
    _count?: boolean | SSLProvidersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sSLProviders"]>

  export type SSLProvidersSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type SSLProvidersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    websites?: boolean | SSLProviders$websitesArgs<ExtArgs>
    _count?: boolean | SSLProvidersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SSLProvidersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SSLProviders"
    objects: {
      websites: Prisma.$WebsitesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["sSLProviders"]>
    composites: {}
  }


  type SSLProvidersGetPayload<S extends boolean | null | undefined | SSLProvidersDefaultArgs> = $Result.GetResult<Prisma.$SSLProvidersPayload, S>

  type SSLProvidersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SSLProvidersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SSLProvidersCountAggregateInputType | true
    }

  export interface SSLProvidersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SSLProviders'], meta: { name: 'SSLProviders' } }
    /**
     * Find zero or one SSLProviders that matches the filter.
     * @param {SSLProvidersFindUniqueArgs} args - Arguments to find a SSLProviders
     * @example
     * // Get one SSLProviders
     * const sSLProviders = await prisma.sSLProviders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SSLProvidersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SSLProvidersFindUniqueArgs<ExtArgs>>
    ): Prisma__SSLProvidersClient<$Result.GetResult<Prisma.$SSLProvidersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SSLProviders that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SSLProvidersFindUniqueOrThrowArgs} args - Arguments to find a SSLProviders
     * @example
     * // Get one SSLProviders
     * const sSLProviders = await prisma.sSLProviders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SSLProvidersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SSLProvidersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SSLProvidersClient<$Result.GetResult<Prisma.$SSLProvidersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SSLProviders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLProvidersFindFirstArgs} args - Arguments to find a SSLProviders
     * @example
     * // Get one SSLProviders
     * const sSLProviders = await prisma.sSLProviders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SSLProvidersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SSLProvidersFindFirstArgs<ExtArgs>>
    ): Prisma__SSLProvidersClient<$Result.GetResult<Prisma.$SSLProvidersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SSLProviders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLProvidersFindFirstOrThrowArgs} args - Arguments to find a SSLProviders
     * @example
     * // Get one SSLProviders
     * const sSLProviders = await prisma.sSLProviders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SSLProvidersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SSLProvidersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SSLProvidersClient<$Result.GetResult<Prisma.$SSLProvidersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SSLProviders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLProvidersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SSLProviders
     * const sSLProviders = await prisma.sSLProviders.findMany()
     * 
     * // Get first 10 SSLProviders
     * const sSLProviders = await prisma.sSLProviders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sSLProvidersWithIdOnly = await prisma.sSLProviders.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SSLProvidersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SSLProvidersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SSLProvidersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SSLProviders.
     * @param {SSLProvidersCreateArgs} args - Arguments to create a SSLProviders.
     * @example
     * // Create one SSLProviders
     * const SSLProviders = await prisma.sSLProviders.create({
     *   data: {
     *     // ... data to create a SSLProviders
     *   }
     * })
     * 
    **/
    create<T extends SSLProvidersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SSLProvidersCreateArgs<ExtArgs>>
    ): Prisma__SSLProvidersClient<$Result.GetResult<Prisma.$SSLProvidersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SSLProviders.
     *     @param {SSLProvidersCreateManyArgs} args - Arguments to create many SSLProviders.
     *     @example
     *     // Create many SSLProviders
     *     const sSLProviders = await prisma.sSLProviders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SSLProvidersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SSLProvidersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SSLProviders.
     * @param {SSLProvidersDeleteArgs} args - Arguments to delete one SSLProviders.
     * @example
     * // Delete one SSLProviders
     * const SSLProviders = await prisma.sSLProviders.delete({
     *   where: {
     *     // ... filter to delete one SSLProviders
     *   }
     * })
     * 
    **/
    delete<T extends SSLProvidersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SSLProvidersDeleteArgs<ExtArgs>>
    ): Prisma__SSLProvidersClient<$Result.GetResult<Prisma.$SSLProvidersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SSLProviders.
     * @param {SSLProvidersUpdateArgs} args - Arguments to update one SSLProviders.
     * @example
     * // Update one SSLProviders
     * const sSLProviders = await prisma.sSLProviders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SSLProvidersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SSLProvidersUpdateArgs<ExtArgs>>
    ): Prisma__SSLProvidersClient<$Result.GetResult<Prisma.$SSLProvidersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SSLProviders.
     * @param {SSLProvidersDeleteManyArgs} args - Arguments to filter SSLProviders to delete.
     * @example
     * // Delete a few SSLProviders
     * const { count } = await prisma.sSLProviders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SSLProvidersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SSLProvidersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SSLProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLProvidersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SSLProviders
     * const sSLProviders = await prisma.sSLProviders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SSLProvidersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SSLProvidersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SSLProviders.
     * @param {SSLProvidersUpsertArgs} args - Arguments to update or create a SSLProviders.
     * @example
     * // Update or create a SSLProviders
     * const sSLProviders = await prisma.sSLProviders.upsert({
     *   create: {
     *     // ... data to create a SSLProviders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SSLProviders we want to update
     *   }
     * })
    **/
    upsert<T extends SSLProvidersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SSLProvidersUpsertArgs<ExtArgs>>
    ): Prisma__SSLProvidersClient<$Result.GetResult<Prisma.$SSLProvidersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SSLProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLProvidersCountArgs} args - Arguments to filter SSLProviders to count.
     * @example
     * // Count the number of SSLProviders
     * const count = await prisma.sSLProviders.count({
     *   where: {
     *     // ... the filter for the SSLProviders we want to count
     *   }
     * })
    **/
    count<T extends SSLProvidersCountArgs>(
      args?: Subset<T, SSLProvidersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SSLProvidersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SSLProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLProvidersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SSLProvidersAggregateArgs>(args: Subset<T, SSLProvidersAggregateArgs>): Prisma.PrismaPromise<GetSSLProvidersAggregateType<T>>

    /**
     * Group by SSLProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SSLProvidersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SSLProvidersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SSLProvidersGroupByArgs['orderBy'] }
        : { orderBy?: SSLProvidersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SSLProvidersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSSLProvidersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SSLProviders model
   */
  readonly fields: SSLProvidersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SSLProviders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SSLProvidersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    websites<T extends SSLProviders$websitesArgs<ExtArgs> = {}>(args?: Subset<T, SSLProviders$websitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebsitesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SSLProviders model
   */ 
  interface SSLProvidersFieldRefs {
    readonly id: FieldRef<"SSLProviders", 'String'>
    readonly name: FieldRef<"SSLProviders", 'String'>
  }
    

  // Custom InputTypes

  /**
   * SSLProviders findUnique
   */
  export type SSLProvidersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLProviders
     */
    select?: SSLProvidersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLProvidersInclude<ExtArgs> | null
    /**
     * Filter, which SSLProviders to fetch.
     */
    where: SSLProvidersWhereUniqueInput
  }


  /**
   * SSLProviders findUniqueOrThrow
   */
  export type SSLProvidersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLProviders
     */
    select?: SSLProvidersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLProvidersInclude<ExtArgs> | null
    /**
     * Filter, which SSLProviders to fetch.
     */
    where: SSLProvidersWhereUniqueInput
  }


  /**
   * SSLProviders findFirst
   */
  export type SSLProvidersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLProviders
     */
    select?: SSLProvidersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLProvidersInclude<ExtArgs> | null
    /**
     * Filter, which SSLProviders to fetch.
     */
    where?: SSLProvidersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SSLProviders to fetch.
     */
    orderBy?: SSLProvidersOrderByWithRelationInput | SSLProvidersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SSLProviders.
     */
    cursor?: SSLProvidersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SSLProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SSLProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SSLProviders.
     */
    distinct?: SSLProvidersScalarFieldEnum | SSLProvidersScalarFieldEnum[]
  }


  /**
   * SSLProviders findFirstOrThrow
   */
  export type SSLProvidersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLProviders
     */
    select?: SSLProvidersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLProvidersInclude<ExtArgs> | null
    /**
     * Filter, which SSLProviders to fetch.
     */
    where?: SSLProvidersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SSLProviders to fetch.
     */
    orderBy?: SSLProvidersOrderByWithRelationInput | SSLProvidersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SSLProviders.
     */
    cursor?: SSLProvidersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SSLProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SSLProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SSLProviders.
     */
    distinct?: SSLProvidersScalarFieldEnum | SSLProvidersScalarFieldEnum[]
  }


  /**
   * SSLProviders findMany
   */
  export type SSLProvidersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLProviders
     */
    select?: SSLProvidersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLProvidersInclude<ExtArgs> | null
    /**
     * Filter, which SSLProviders to fetch.
     */
    where?: SSLProvidersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SSLProviders to fetch.
     */
    orderBy?: SSLProvidersOrderByWithRelationInput | SSLProvidersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SSLProviders.
     */
    cursor?: SSLProvidersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SSLProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SSLProviders.
     */
    skip?: number
    distinct?: SSLProvidersScalarFieldEnum | SSLProvidersScalarFieldEnum[]
  }


  /**
   * SSLProviders create
   */
  export type SSLProvidersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLProviders
     */
    select?: SSLProvidersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLProvidersInclude<ExtArgs> | null
    /**
     * The data needed to create a SSLProviders.
     */
    data: XOR<SSLProvidersCreateInput, SSLProvidersUncheckedCreateInput>
  }


  /**
   * SSLProviders createMany
   */
  export type SSLProvidersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SSLProviders.
     */
    data: SSLProvidersCreateManyInput | SSLProvidersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SSLProviders update
   */
  export type SSLProvidersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLProviders
     */
    select?: SSLProvidersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLProvidersInclude<ExtArgs> | null
    /**
     * The data needed to update a SSLProviders.
     */
    data: XOR<SSLProvidersUpdateInput, SSLProvidersUncheckedUpdateInput>
    /**
     * Choose, which SSLProviders to update.
     */
    where: SSLProvidersWhereUniqueInput
  }


  /**
   * SSLProviders updateMany
   */
  export type SSLProvidersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SSLProviders.
     */
    data: XOR<SSLProvidersUpdateManyMutationInput, SSLProvidersUncheckedUpdateManyInput>
    /**
     * Filter which SSLProviders to update
     */
    where?: SSLProvidersWhereInput
  }


  /**
   * SSLProviders upsert
   */
  export type SSLProvidersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLProviders
     */
    select?: SSLProvidersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLProvidersInclude<ExtArgs> | null
    /**
     * The filter to search for the SSLProviders to update in case it exists.
     */
    where: SSLProvidersWhereUniqueInput
    /**
     * In case the SSLProviders found by the `where` argument doesn't exist, create a new SSLProviders with this data.
     */
    create: XOR<SSLProvidersCreateInput, SSLProvidersUncheckedCreateInput>
    /**
     * In case the SSLProviders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SSLProvidersUpdateInput, SSLProvidersUncheckedUpdateInput>
  }


  /**
   * SSLProviders delete
   */
  export type SSLProvidersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLProviders
     */
    select?: SSLProvidersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLProvidersInclude<ExtArgs> | null
    /**
     * Filter which SSLProviders to delete.
     */
    where: SSLProvidersWhereUniqueInput
  }


  /**
   * SSLProviders deleteMany
   */
  export type SSLProvidersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SSLProviders to delete
     */
    where?: SSLProvidersWhereInput
  }


  /**
   * SSLProviders.websites
   */
  export type SSLProviders$websitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Websites
     */
    select?: WebsitesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsitesInclude<ExtArgs> | null
    where?: WebsitesWhereInput
    orderBy?: WebsitesOrderByWithRelationInput | WebsitesOrderByWithRelationInput[]
    cursor?: WebsitesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebsitesScalarFieldEnum | WebsitesScalarFieldEnum[]
  }


  /**
   * SSLProviders without action
   */
  export type SSLProvidersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SSLProviders
     */
    select?: SSLProvidersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SSLProvidersInclude<ExtArgs> | null
  }



  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    password: number
    createdAt: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    createdAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    createdAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    username: string
    password: string
    createdAt: Date
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    createdAt?: boolean
    website?: boolean | Users$websiteArgs<ExtArgs>
    mail?: boolean | Users$mailArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    createdAt?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    website?: boolean | Users$websiteArgs<ExtArgs>
    mail?: boolean | Users$mailArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      website: Prisma.$WebsitesPayload<ExtArgs>[]
      mail: Prisma.$MailsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
      createdAt: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    website<T extends Users$websiteArgs<ExtArgs> = {}>(args?: Subset<T, Users$websiteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebsitesPayload<ExtArgs>, T, 'findMany'> | Null>;

    mail<T extends Users$mailArgs<ExtArgs> = {}>(args?: Subset<T, Users$mailArgs<ExtArgs>>): Prisma__MailsClient<$Result.GetResult<Prisma.$MailsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'String'>
    readonly username: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly createdAt: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users.website
   */
  export type Users$websiteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Websites
     */
    select?: WebsitesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WebsitesInclude<ExtArgs> | null
    where?: WebsitesWhereInput
    orderBy?: WebsitesOrderByWithRelationInput | WebsitesOrderByWithRelationInput[]
    cursor?: WebsitesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebsitesScalarFieldEnum | WebsitesScalarFieldEnum[]
  }


  /**
   * Users.mail
   */
  export type Users$mailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mails
     */
    select?: MailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MailsInclude<ExtArgs> | null
    where?: MailsWhereInput
  }


  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const WebsitesScalarFieldEnum: {
    id: 'id',
    link: 'link',
    userId: 'userId',
    sslProviderId: 'sslProviderId'
  };

  export type WebsitesScalarFieldEnum = (typeof WebsitesScalarFieldEnum)[keyof typeof WebsitesScalarFieldEnum]


  export const SSLResultsScalarFieldEnum: {
    id: 'id',
    websiteId: 'websiteId',
    validFrom: 'validFrom',
    validTo: 'validTo',
    fingerPrint: 'fingerPrint',
    serialNumber: 'serialNumber',
    infoAccess: 'infoAccess',
    createdAt: 'createdAt'
  };

  export type SSLResultsScalarFieldEnum = (typeof SSLResultsScalarFieldEnum)[keyof typeof SSLResultsScalarFieldEnum]


  export const MailsScalarFieldEnum: {
    id: 'id',
    mail: 'mail',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type MailsScalarFieldEnum = (typeof MailsScalarFieldEnum)[keyof typeof MailsScalarFieldEnum]


  export const SSLProvidersScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type SSLProvidersScalarFieldEnum = (typeof SSLProvidersScalarFieldEnum)[keyof typeof SSLProvidersScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type WebsitesWhereInput = {
    AND?: WebsitesWhereInput | WebsitesWhereInput[]
    OR?: WebsitesWhereInput[]
    NOT?: WebsitesWhereInput | WebsitesWhereInput[]
    id?: StringFilter<"Websites"> | string
    link?: StringFilter<"Websites"> | string
    userId?: StringFilter<"Websites"> | string
    sslProviderId?: StringNullableFilter<"Websites"> | string | null
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    sslProvider?: XOR<SSLProvidersNullableRelationFilter, SSLProvidersWhereInput> | null
    sslResults?: SSLResultsListRelationFilter
  }

  export type WebsitesOrderByWithRelationInput = {
    id?: SortOrder
    link?: SortOrder
    userId?: SortOrder
    sslProviderId?: SortOrderInput | SortOrder
    user?: UsersOrderByWithRelationInput
    sslProvider?: SSLProvidersOrderByWithRelationInput
    sslResults?: SSLResultsOrderByRelationAggregateInput
  }

  export type WebsitesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    link?: string
    AND?: WebsitesWhereInput | WebsitesWhereInput[]
    OR?: WebsitesWhereInput[]
    NOT?: WebsitesWhereInput | WebsitesWhereInput[]
    userId?: StringFilter<"Websites"> | string
    sslProviderId?: StringNullableFilter<"Websites"> | string | null
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    sslProvider?: XOR<SSLProvidersNullableRelationFilter, SSLProvidersWhereInput> | null
    sslResults?: SSLResultsListRelationFilter
  }, "id" | "link">

  export type WebsitesOrderByWithAggregationInput = {
    id?: SortOrder
    link?: SortOrder
    userId?: SortOrder
    sslProviderId?: SortOrderInput | SortOrder
    _count?: WebsitesCountOrderByAggregateInput
    _max?: WebsitesMaxOrderByAggregateInput
    _min?: WebsitesMinOrderByAggregateInput
  }

  export type WebsitesScalarWhereWithAggregatesInput = {
    AND?: WebsitesScalarWhereWithAggregatesInput | WebsitesScalarWhereWithAggregatesInput[]
    OR?: WebsitesScalarWhereWithAggregatesInput[]
    NOT?: WebsitesScalarWhereWithAggregatesInput | WebsitesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Websites"> | string
    link?: StringWithAggregatesFilter<"Websites"> | string
    userId?: StringWithAggregatesFilter<"Websites"> | string
    sslProviderId?: StringNullableWithAggregatesFilter<"Websites"> | string | null
  }

  export type SSLResultsWhereInput = {
    AND?: SSLResultsWhereInput | SSLResultsWhereInput[]
    OR?: SSLResultsWhereInput[]
    NOT?: SSLResultsWhereInput | SSLResultsWhereInput[]
    id?: StringFilter<"SSLResults"> | string
    websiteId?: StringFilter<"SSLResults"> | string
    validFrom?: StringFilter<"SSLResults"> | string
    validTo?: StringFilter<"SSLResults"> | string
    fingerPrint?: StringFilter<"SSLResults"> | string
    serialNumber?: StringFilter<"SSLResults"> | string
    infoAccess?: JsonFilter<"SSLResults">
    createdAt?: DateTimeFilter<"SSLResults"> | Date | string
    website?: XOR<WebsitesRelationFilter, WebsitesWhereInput>
  }

  export type SSLResultsOrderByWithRelationInput = {
    id?: SortOrder
    websiteId?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrder
    fingerPrint?: SortOrder
    serialNumber?: SortOrder
    infoAccess?: SortOrder
    createdAt?: SortOrder
    website?: WebsitesOrderByWithRelationInput
  }

  export type SSLResultsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SSLResultsWhereInput | SSLResultsWhereInput[]
    OR?: SSLResultsWhereInput[]
    NOT?: SSLResultsWhereInput | SSLResultsWhereInput[]
    websiteId?: StringFilter<"SSLResults"> | string
    validFrom?: StringFilter<"SSLResults"> | string
    validTo?: StringFilter<"SSLResults"> | string
    fingerPrint?: StringFilter<"SSLResults"> | string
    serialNumber?: StringFilter<"SSLResults"> | string
    infoAccess?: JsonFilter<"SSLResults">
    createdAt?: DateTimeFilter<"SSLResults"> | Date | string
    website?: XOR<WebsitesRelationFilter, WebsitesWhereInput>
  }, "id">

  export type SSLResultsOrderByWithAggregationInput = {
    id?: SortOrder
    websiteId?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrder
    fingerPrint?: SortOrder
    serialNumber?: SortOrder
    infoAccess?: SortOrder
    createdAt?: SortOrder
    _count?: SSLResultsCountOrderByAggregateInput
    _max?: SSLResultsMaxOrderByAggregateInput
    _min?: SSLResultsMinOrderByAggregateInput
  }

  export type SSLResultsScalarWhereWithAggregatesInput = {
    AND?: SSLResultsScalarWhereWithAggregatesInput | SSLResultsScalarWhereWithAggregatesInput[]
    OR?: SSLResultsScalarWhereWithAggregatesInput[]
    NOT?: SSLResultsScalarWhereWithAggregatesInput | SSLResultsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SSLResults"> | string
    websiteId?: StringWithAggregatesFilter<"SSLResults"> | string
    validFrom?: StringWithAggregatesFilter<"SSLResults"> | string
    validTo?: StringWithAggregatesFilter<"SSLResults"> | string
    fingerPrint?: StringWithAggregatesFilter<"SSLResults"> | string
    serialNumber?: StringWithAggregatesFilter<"SSLResults"> | string
    infoAccess?: JsonWithAggregatesFilter<"SSLResults">
    createdAt?: DateTimeWithAggregatesFilter<"SSLResults"> | Date | string
  }

  export type MailsWhereInput = {
    AND?: MailsWhereInput | MailsWhereInput[]
    OR?: MailsWhereInput[]
    NOT?: MailsWhereInput | MailsWhereInput[]
    id?: StringFilter<"Mails"> | string
    mail?: StringFilter<"Mails"> | string
    userId?: StringFilter<"Mails"> | string
    createdAt?: DateTimeFilter<"Mails"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type MailsOrderByWithRelationInput = {
    id?: SortOrder
    mail?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type MailsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: MailsWhereInput | MailsWhereInput[]
    OR?: MailsWhereInput[]
    NOT?: MailsWhereInput | MailsWhereInput[]
    mail?: StringFilter<"Mails"> | string
    createdAt?: DateTimeFilter<"Mails"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id" | "userId">

  export type MailsOrderByWithAggregationInput = {
    id?: SortOrder
    mail?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: MailsCountOrderByAggregateInput
    _max?: MailsMaxOrderByAggregateInput
    _min?: MailsMinOrderByAggregateInput
  }

  export type MailsScalarWhereWithAggregatesInput = {
    AND?: MailsScalarWhereWithAggregatesInput | MailsScalarWhereWithAggregatesInput[]
    OR?: MailsScalarWhereWithAggregatesInput[]
    NOT?: MailsScalarWhereWithAggregatesInput | MailsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Mails"> | string
    mail?: StringWithAggregatesFilter<"Mails"> | string
    userId?: StringWithAggregatesFilter<"Mails"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Mails"> | Date | string
  }

  export type SSLProvidersWhereInput = {
    AND?: SSLProvidersWhereInput | SSLProvidersWhereInput[]
    OR?: SSLProvidersWhereInput[]
    NOT?: SSLProvidersWhereInput | SSLProvidersWhereInput[]
    id?: StringFilter<"SSLProviders"> | string
    name?: StringFilter<"SSLProviders"> | string
    websites?: WebsitesListRelationFilter
  }

  export type SSLProvidersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    websites?: WebsitesOrderByRelationAggregateInput
  }

  export type SSLProvidersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SSLProvidersWhereInput | SSLProvidersWhereInput[]
    OR?: SSLProvidersWhereInput[]
    NOT?: SSLProvidersWhereInput | SSLProvidersWhereInput[]
    name?: StringFilter<"SSLProviders"> | string
    websites?: WebsitesListRelationFilter
  }, "id">

  export type SSLProvidersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: SSLProvidersCountOrderByAggregateInput
    _max?: SSLProvidersMaxOrderByAggregateInput
    _min?: SSLProvidersMinOrderByAggregateInput
  }

  export type SSLProvidersScalarWhereWithAggregatesInput = {
    AND?: SSLProvidersScalarWhereWithAggregatesInput | SSLProvidersScalarWhereWithAggregatesInput[]
    OR?: SSLProvidersScalarWhereWithAggregatesInput[]
    NOT?: SSLProvidersScalarWhereWithAggregatesInput | SSLProvidersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SSLProviders"> | string
    name?: StringWithAggregatesFilter<"SSLProviders"> | string
  }

  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: StringFilter<"Users"> | string
    username?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    createdAt?: DateTimeFilter<"Users"> | Date | string
    website?: WebsitesListRelationFilter
    mail?: XOR<MailsNullableRelationFilter, MailsWhereInput> | null
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    website?: WebsitesOrderByRelationAggregateInput
    mail?: MailsOrderByWithRelationInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    password?: StringFilter<"Users"> | string
    createdAt?: DateTimeFilter<"Users"> | Date | string
    website?: WebsitesListRelationFilter
    mail?: XOR<MailsNullableRelationFilter, MailsWhereInput> | null
  }, "id" | "username">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Users"> | string
    username?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
  }

  export type WebsitesCreateInput = {
    id?: string
    link: string
    user: UsersCreateNestedOneWithoutWebsiteInput
    sslProvider?: SSLProvidersCreateNestedOneWithoutWebsitesInput
    sslResults?: SSLResultsCreateNestedManyWithoutWebsiteInput
  }

  export type WebsitesUncheckedCreateInput = {
    id?: string
    link: string
    userId: string
    sslProviderId?: string | null
    sslResults?: SSLResultsUncheckedCreateNestedManyWithoutWebsiteInput
  }

  export type WebsitesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutWebsiteNestedInput
    sslProvider?: SSLProvidersUpdateOneWithoutWebsitesNestedInput
    sslResults?: SSLResultsUpdateManyWithoutWebsiteNestedInput
  }

  export type WebsitesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sslProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    sslResults?: SSLResultsUncheckedUpdateManyWithoutWebsiteNestedInput
  }

  export type WebsitesCreateManyInput = {
    id?: string
    link: string
    userId: string
    sslProviderId?: string | null
  }

  export type WebsitesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type WebsitesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sslProviderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SSLResultsCreateInput = {
    id?: string
    validFrom: string
    validTo: string
    fingerPrint: string
    serialNumber: string
    infoAccess: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    website: WebsitesCreateNestedOneWithoutSslResultsInput
  }

  export type SSLResultsUncheckedCreateInput = {
    id?: string
    websiteId: string
    validFrom: string
    validTo: string
    fingerPrint: string
    serialNumber: string
    infoAccess: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SSLResultsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    validFrom?: StringFieldUpdateOperationsInput | string
    validTo?: StringFieldUpdateOperationsInput | string
    fingerPrint?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    infoAccess?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    website?: WebsitesUpdateOneRequiredWithoutSslResultsNestedInput
  }

  export type SSLResultsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    websiteId?: StringFieldUpdateOperationsInput | string
    validFrom?: StringFieldUpdateOperationsInput | string
    validTo?: StringFieldUpdateOperationsInput | string
    fingerPrint?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    infoAccess?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SSLResultsCreateManyInput = {
    id?: string
    websiteId: string
    validFrom: string
    validTo: string
    fingerPrint: string
    serialNumber: string
    infoAccess: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SSLResultsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    validFrom?: StringFieldUpdateOperationsInput | string
    validTo?: StringFieldUpdateOperationsInput | string
    fingerPrint?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    infoAccess?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SSLResultsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    websiteId?: StringFieldUpdateOperationsInput | string
    validFrom?: StringFieldUpdateOperationsInput | string
    validTo?: StringFieldUpdateOperationsInput | string
    fingerPrint?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    infoAccess?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MailsCreateInput = {
    id?: string
    mail: string
    createdAt?: Date | string
    user: UsersCreateNestedOneWithoutMailInput
  }

  export type MailsUncheckedCreateInput = {
    id?: string
    mail: string
    userId: string
    createdAt?: Date | string
  }

  export type MailsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutMailNestedInput
  }

  export type MailsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MailsCreateManyInput = {
    id?: string
    mail: string
    userId: string
    createdAt?: Date | string
  }

  export type MailsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MailsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SSLProvidersCreateInput = {
    id?: string
    name: string
    websites?: WebsitesCreateNestedManyWithoutSslProviderInput
  }

  export type SSLProvidersUncheckedCreateInput = {
    id?: string
    name: string
    websites?: WebsitesUncheckedCreateNestedManyWithoutSslProviderInput
  }

  export type SSLProvidersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    websites?: WebsitesUpdateManyWithoutSslProviderNestedInput
  }

  export type SSLProvidersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    websites?: WebsitesUncheckedUpdateManyWithoutSslProviderNestedInput
  }

  export type SSLProvidersCreateManyInput = {
    id?: string
    name: string
  }

  export type SSLProvidersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SSLProvidersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UsersCreateInput = {
    id?: string
    username: string
    password: string
    createdAt?: Date | string
    website?: WebsitesCreateNestedManyWithoutUserInput
    mail?: MailsCreateNestedOneWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    id?: string
    username: string
    password: string
    createdAt?: Date | string
    website?: WebsitesUncheckedCreateNestedManyWithoutUserInput
    mail?: MailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UsersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    website?: WebsitesUpdateManyWithoutUserNestedInput
    mail?: MailsUpdateOneWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    website?: WebsitesUncheckedUpdateManyWithoutUserNestedInput
    mail?: MailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    id?: string
    username: string
    password: string
    createdAt?: Date | string
  }

  export type UsersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type SSLProvidersNullableRelationFilter = {
    is?: SSLProvidersWhereInput | null
    isNot?: SSLProvidersWhereInput | null
  }

  export type SSLResultsListRelationFilter = {
    every?: SSLResultsWhereInput
    some?: SSLResultsWhereInput
    none?: SSLResultsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SSLResultsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WebsitesCountOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    userId?: SortOrder
    sslProviderId?: SortOrder
  }

  export type WebsitesMaxOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    userId?: SortOrder
    sslProviderId?: SortOrder
  }

  export type WebsitesMinOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    userId?: SortOrder
    sslProviderId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type WebsitesRelationFilter = {
    is?: WebsitesWhereInput
    isNot?: WebsitesWhereInput
  }

  export type SSLResultsCountOrderByAggregateInput = {
    id?: SortOrder
    websiteId?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrder
    fingerPrint?: SortOrder
    serialNumber?: SortOrder
    infoAccess?: SortOrder
    createdAt?: SortOrder
  }

  export type SSLResultsMaxOrderByAggregateInput = {
    id?: SortOrder
    websiteId?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrder
    fingerPrint?: SortOrder
    serialNumber?: SortOrder
    createdAt?: SortOrder
  }

  export type SSLResultsMinOrderByAggregateInput = {
    id?: SortOrder
    websiteId?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrder
    fingerPrint?: SortOrder
    serialNumber?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type MailsCountOrderByAggregateInput = {
    id?: SortOrder
    mail?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type MailsMaxOrderByAggregateInput = {
    id?: SortOrder
    mail?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type MailsMinOrderByAggregateInput = {
    id?: SortOrder
    mail?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type WebsitesListRelationFilter = {
    every?: WebsitesWhereInput
    some?: WebsitesWhereInput
    none?: WebsitesWhereInput
  }

  export type WebsitesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SSLProvidersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SSLProvidersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SSLProvidersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type MailsNullableRelationFilter = {
    is?: MailsWhereInput | null
    isNot?: MailsWhereInput | null
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UsersCreateNestedOneWithoutWebsiteInput = {
    create?: XOR<UsersCreateWithoutWebsiteInput, UsersUncheckedCreateWithoutWebsiteInput>
    connectOrCreate?: UsersCreateOrConnectWithoutWebsiteInput
    connect?: UsersWhereUniqueInput
  }

  export type SSLProvidersCreateNestedOneWithoutWebsitesInput = {
    create?: XOR<SSLProvidersCreateWithoutWebsitesInput, SSLProvidersUncheckedCreateWithoutWebsitesInput>
    connectOrCreate?: SSLProvidersCreateOrConnectWithoutWebsitesInput
    connect?: SSLProvidersWhereUniqueInput
  }

  export type SSLResultsCreateNestedManyWithoutWebsiteInput = {
    create?: XOR<SSLResultsCreateWithoutWebsiteInput, SSLResultsUncheckedCreateWithoutWebsiteInput> | SSLResultsCreateWithoutWebsiteInput[] | SSLResultsUncheckedCreateWithoutWebsiteInput[]
    connectOrCreate?: SSLResultsCreateOrConnectWithoutWebsiteInput | SSLResultsCreateOrConnectWithoutWebsiteInput[]
    createMany?: SSLResultsCreateManyWebsiteInputEnvelope
    connect?: SSLResultsWhereUniqueInput | SSLResultsWhereUniqueInput[]
  }

  export type SSLResultsUncheckedCreateNestedManyWithoutWebsiteInput = {
    create?: XOR<SSLResultsCreateWithoutWebsiteInput, SSLResultsUncheckedCreateWithoutWebsiteInput> | SSLResultsCreateWithoutWebsiteInput[] | SSLResultsUncheckedCreateWithoutWebsiteInput[]
    connectOrCreate?: SSLResultsCreateOrConnectWithoutWebsiteInput | SSLResultsCreateOrConnectWithoutWebsiteInput[]
    createMany?: SSLResultsCreateManyWebsiteInputEnvelope
    connect?: SSLResultsWhereUniqueInput | SSLResultsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UsersUpdateOneRequiredWithoutWebsiteNestedInput = {
    create?: XOR<UsersCreateWithoutWebsiteInput, UsersUncheckedCreateWithoutWebsiteInput>
    connectOrCreate?: UsersCreateOrConnectWithoutWebsiteInput
    upsert?: UsersUpsertWithoutWebsiteInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutWebsiteInput, UsersUpdateWithoutWebsiteInput>, UsersUncheckedUpdateWithoutWebsiteInput>
  }

  export type SSLProvidersUpdateOneWithoutWebsitesNestedInput = {
    create?: XOR<SSLProvidersCreateWithoutWebsitesInput, SSLProvidersUncheckedCreateWithoutWebsitesInput>
    connectOrCreate?: SSLProvidersCreateOrConnectWithoutWebsitesInput
    upsert?: SSLProvidersUpsertWithoutWebsitesInput
    disconnect?: SSLProvidersWhereInput | boolean
    delete?: SSLProvidersWhereInput | boolean
    connect?: SSLProvidersWhereUniqueInput
    update?: XOR<XOR<SSLProvidersUpdateToOneWithWhereWithoutWebsitesInput, SSLProvidersUpdateWithoutWebsitesInput>, SSLProvidersUncheckedUpdateWithoutWebsitesInput>
  }

  export type SSLResultsUpdateManyWithoutWebsiteNestedInput = {
    create?: XOR<SSLResultsCreateWithoutWebsiteInput, SSLResultsUncheckedCreateWithoutWebsiteInput> | SSLResultsCreateWithoutWebsiteInput[] | SSLResultsUncheckedCreateWithoutWebsiteInput[]
    connectOrCreate?: SSLResultsCreateOrConnectWithoutWebsiteInput | SSLResultsCreateOrConnectWithoutWebsiteInput[]
    upsert?: SSLResultsUpsertWithWhereUniqueWithoutWebsiteInput | SSLResultsUpsertWithWhereUniqueWithoutWebsiteInput[]
    createMany?: SSLResultsCreateManyWebsiteInputEnvelope
    set?: SSLResultsWhereUniqueInput | SSLResultsWhereUniqueInput[]
    disconnect?: SSLResultsWhereUniqueInput | SSLResultsWhereUniqueInput[]
    delete?: SSLResultsWhereUniqueInput | SSLResultsWhereUniqueInput[]
    connect?: SSLResultsWhereUniqueInput | SSLResultsWhereUniqueInput[]
    update?: SSLResultsUpdateWithWhereUniqueWithoutWebsiteInput | SSLResultsUpdateWithWhereUniqueWithoutWebsiteInput[]
    updateMany?: SSLResultsUpdateManyWithWhereWithoutWebsiteInput | SSLResultsUpdateManyWithWhereWithoutWebsiteInput[]
    deleteMany?: SSLResultsScalarWhereInput | SSLResultsScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SSLResultsUncheckedUpdateManyWithoutWebsiteNestedInput = {
    create?: XOR<SSLResultsCreateWithoutWebsiteInput, SSLResultsUncheckedCreateWithoutWebsiteInput> | SSLResultsCreateWithoutWebsiteInput[] | SSLResultsUncheckedCreateWithoutWebsiteInput[]
    connectOrCreate?: SSLResultsCreateOrConnectWithoutWebsiteInput | SSLResultsCreateOrConnectWithoutWebsiteInput[]
    upsert?: SSLResultsUpsertWithWhereUniqueWithoutWebsiteInput | SSLResultsUpsertWithWhereUniqueWithoutWebsiteInput[]
    createMany?: SSLResultsCreateManyWebsiteInputEnvelope
    set?: SSLResultsWhereUniqueInput | SSLResultsWhereUniqueInput[]
    disconnect?: SSLResultsWhereUniqueInput | SSLResultsWhereUniqueInput[]
    delete?: SSLResultsWhereUniqueInput | SSLResultsWhereUniqueInput[]
    connect?: SSLResultsWhereUniqueInput | SSLResultsWhereUniqueInput[]
    update?: SSLResultsUpdateWithWhereUniqueWithoutWebsiteInput | SSLResultsUpdateWithWhereUniqueWithoutWebsiteInput[]
    updateMany?: SSLResultsUpdateManyWithWhereWithoutWebsiteInput | SSLResultsUpdateManyWithWhereWithoutWebsiteInput[]
    deleteMany?: SSLResultsScalarWhereInput | SSLResultsScalarWhereInput[]
  }

  export type WebsitesCreateNestedOneWithoutSslResultsInput = {
    create?: XOR<WebsitesCreateWithoutSslResultsInput, WebsitesUncheckedCreateWithoutSslResultsInput>
    connectOrCreate?: WebsitesCreateOrConnectWithoutSslResultsInput
    connect?: WebsitesWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WebsitesUpdateOneRequiredWithoutSslResultsNestedInput = {
    create?: XOR<WebsitesCreateWithoutSslResultsInput, WebsitesUncheckedCreateWithoutSslResultsInput>
    connectOrCreate?: WebsitesCreateOrConnectWithoutSslResultsInput
    upsert?: WebsitesUpsertWithoutSslResultsInput
    connect?: WebsitesWhereUniqueInput
    update?: XOR<XOR<WebsitesUpdateToOneWithWhereWithoutSslResultsInput, WebsitesUpdateWithoutSslResultsInput>, WebsitesUncheckedUpdateWithoutSslResultsInput>
  }

  export type UsersCreateNestedOneWithoutMailInput = {
    create?: XOR<UsersCreateWithoutMailInput, UsersUncheckedCreateWithoutMailInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMailInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutMailNestedInput = {
    create?: XOR<UsersCreateWithoutMailInput, UsersUncheckedCreateWithoutMailInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMailInput
    upsert?: UsersUpsertWithoutMailInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutMailInput, UsersUpdateWithoutMailInput>, UsersUncheckedUpdateWithoutMailInput>
  }

  export type WebsitesCreateNestedManyWithoutSslProviderInput = {
    create?: XOR<WebsitesCreateWithoutSslProviderInput, WebsitesUncheckedCreateWithoutSslProviderInput> | WebsitesCreateWithoutSslProviderInput[] | WebsitesUncheckedCreateWithoutSslProviderInput[]
    connectOrCreate?: WebsitesCreateOrConnectWithoutSslProviderInput | WebsitesCreateOrConnectWithoutSslProviderInput[]
    createMany?: WebsitesCreateManySslProviderInputEnvelope
    connect?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
  }

  export type WebsitesUncheckedCreateNestedManyWithoutSslProviderInput = {
    create?: XOR<WebsitesCreateWithoutSslProviderInput, WebsitesUncheckedCreateWithoutSslProviderInput> | WebsitesCreateWithoutSslProviderInput[] | WebsitesUncheckedCreateWithoutSslProviderInput[]
    connectOrCreate?: WebsitesCreateOrConnectWithoutSslProviderInput | WebsitesCreateOrConnectWithoutSslProviderInput[]
    createMany?: WebsitesCreateManySslProviderInputEnvelope
    connect?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
  }

  export type WebsitesUpdateManyWithoutSslProviderNestedInput = {
    create?: XOR<WebsitesCreateWithoutSslProviderInput, WebsitesUncheckedCreateWithoutSslProviderInput> | WebsitesCreateWithoutSslProviderInput[] | WebsitesUncheckedCreateWithoutSslProviderInput[]
    connectOrCreate?: WebsitesCreateOrConnectWithoutSslProviderInput | WebsitesCreateOrConnectWithoutSslProviderInput[]
    upsert?: WebsitesUpsertWithWhereUniqueWithoutSslProviderInput | WebsitesUpsertWithWhereUniqueWithoutSslProviderInput[]
    createMany?: WebsitesCreateManySslProviderInputEnvelope
    set?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    disconnect?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    delete?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    connect?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    update?: WebsitesUpdateWithWhereUniqueWithoutSslProviderInput | WebsitesUpdateWithWhereUniqueWithoutSslProviderInput[]
    updateMany?: WebsitesUpdateManyWithWhereWithoutSslProviderInput | WebsitesUpdateManyWithWhereWithoutSslProviderInput[]
    deleteMany?: WebsitesScalarWhereInput | WebsitesScalarWhereInput[]
  }

  export type WebsitesUncheckedUpdateManyWithoutSslProviderNestedInput = {
    create?: XOR<WebsitesCreateWithoutSslProviderInput, WebsitesUncheckedCreateWithoutSslProviderInput> | WebsitesCreateWithoutSslProviderInput[] | WebsitesUncheckedCreateWithoutSslProviderInput[]
    connectOrCreate?: WebsitesCreateOrConnectWithoutSslProviderInput | WebsitesCreateOrConnectWithoutSslProviderInput[]
    upsert?: WebsitesUpsertWithWhereUniqueWithoutSslProviderInput | WebsitesUpsertWithWhereUniqueWithoutSslProviderInput[]
    createMany?: WebsitesCreateManySslProviderInputEnvelope
    set?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    disconnect?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    delete?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    connect?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    update?: WebsitesUpdateWithWhereUniqueWithoutSslProviderInput | WebsitesUpdateWithWhereUniqueWithoutSslProviderInput[]
    updateMany?: WebsitesUpdateManyWithWhereWithoutSslProviderInput | WebsitesUpdateManyWithWhereWithoutSslProviderInput[]
    deleteMany?: WebsitesScalarWhereInput | WebsitesScalarWhereInput[]
  }

  export type WebsitesCreateNestedManyWithoutUserInput = {
    create?: XOR<WebsitesCreateWithoutUserInput, WebsitesUncheckedCreateWithoutUserInput> | WebsitesCreateWithoutUserInput[] | WebsitesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WebsitesCreateOrConnectWithoutUserInput | WebsitesCreateOrConnectWithoutUserInput[]
    createMany?: WebsitesCreateManyUserInputEnvelope
    connect?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
  }

  export type MailsCreateNestedOneWithoutUserInput = {
    create?: XOR<MailsCreateWithoutUserInput, MailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: MailsCreateOrConnectWithoutUserInput
    connect?: MailsWhereUniqueInput
  }

  export type WebsitesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WebsitesCreateWithoutUserInput, WebsitesUncheckedCreateWithoutUserInput> | WebsitesCreateWithoutUserInput[] | WebsitesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WebsitesCreateOrConnectWithoutUserInput | WebsitesCreateOrConnectWithoutUserInput[]
    createMany?: WebsitesCreateManyUserInputEnvelope
    connect?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
  }

  export type MailsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<MailsCreateWithoutUserInput, MailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: MailsCreateOrConnectWithoutUserInput
    connect?: MailsWhereUniqueInput
  }

  export type WebsitesUpdateManyWithoutUserNestedInput = {
    create?: XOR<WebsitesCreateWithoutUserInput, WebsitesUncheckedCreateWithoutUserInput> | WebsitesCreateWithoutUserInput[] | WebsitesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WebsitesCreateOrConnectWithoutUserInput | WebsitesCreateOrConnectWithoutUserInput[]
    upsert?: WebsitesUpsertWithWhereUniqueWithoutUserInput | WebsitesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WebsitesCreateManyUserInputEnvelope
    set?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    disconnect?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    delete?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    connect?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    update?: WebsitesUpdateWithWhereUniqueWithoutUserInput | WebsitesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WebsitesUpdateManyWithWhereWithoutUserInput | WebsitesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WebsitesScalarWhereInput | WebsitesScalarWhereInput[]
  }

  export type MailsUpdateOneWithoutUserNestedInput = {
    create?: XOR<MailsCreateWithoutUserInput, MailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: MailsCreateOrConnectWithoutUserInput
    upsert?: MailsUpsertWithoutUserInput
    disconnect?: MailsWhereInput | boolean
    delete?: MailsWhereInput | boolean
    connect?: MailsWhereUniqueInput
    update?: XOR<XOR<MailsUpdateToOneWithWhereWithoutUserInput, MailsUpdateWithoutUserInput>, MailsUncheckedUpdateWithoutUserInput>
  }

  export type WebsitesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WebsitesCreateWithoutUserInput, WebsitesUncheckedCreateWithoutUserInput> | WebsitesCreateWithoutUserInput[] | WebsitesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WebsitesCreateOrConnectWithoutUserInput | WebsitesCreateOrConnectWithoutUserInput[]
    upsert?: WebsitesUpsertWithWhereUniqueWithoutUserInput | WebsitesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WebsitesCreateManyUserInputEnvelope
    set?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    disconnect?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    delete?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    connect?: WebsitesWhereUniqueInput | WebsitesWhereUniqueInput[]
    update?: WebsitesUpdateWithWhereUniqueWithoutUserInput | WebsitesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WebsitesUpdateManyWithWhereWithoutUserInput | WebsitesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WebsitesScalarWhereInput | WebsitesScalarWhereInput[]
  }

  export type MailsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<MailsCreateWithoutUserInput, MailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: MailsCreateOrConnectWithoutUserInput
    upsert?: MailsUpsertWithoutUserInput
    disconnect?: MailsWhereInput | boolean
    delete?: MailsWhereInput | boolean
    connect?: MailsWhereUniqueInput
    update?: XOR<XOR<MailsUpdateToOneWithWhereWithoutUserInput, MailsUpdateWithoutUserInput>, MailsUncheckedUpdateWithoutUserInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UsersCreateWithoutWebsiteInput = {
    id?: string
    username: string
    password: string
    createdAt?: Date | string
    mail?: MailsCreateNestedOneWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutWebsiteInput = {
    id?: string
    username: string
    password: string
    createdAt?: Date | string
    mail?: MailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutWebsiteInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutWebsiteInput, UsersUncheckedCreateWithoutWebsiteInput>
  }

  export type SSLProvidersCreateWithoutWebsitesInput = {
    id?: string
    name: string
  }

  export type SSLProvidersUncheckedCreateWithoutWebsitesInput = {
    id?: string
    name: string
  }

  export type SSLProvidersCreateOrConnectWithoutWebsitesInput = {
    where: SSLProvidersWhereUniqueInput
    create: XOR<SSLProvidersCreateWithoutWebsitesInput, SSLProvidersUncheckedCreateWithoutWebsitesInput>
  }

  export type SSLResultsCreateWithoutWebsiteInput = {
    id?: string
    validFrom: string
    validTo: string
    fingerPrint: string
    serialNumber: string
    infoAccess: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SSLResultsUncheckedCreateWithoutWebsiteInput = {
    id?: string
    validFrom: string
    validTo: string
    fingerPrint: string
    serialNumber: string
    infoAccess: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SSLResultsCreateOrConnectWithoutWebsiteInput = {
    where: SSLResultsWhereUniqueInput
    create: XOR<SSLResultsCreateWithoutWebsiteInput, SSLResultsUncheckedCreateWithoutWebsiteInput>
  }

  export type SSLResultsCreateManyWebsiteInputEnvelope = {
    data: SSLResultsCreateManyWebsiteInput | SSLResultsCreateManyWebsiteInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutWebsiteInput = {
    update: XOR<UsersUpdateWithoutWebsiteInput, UsersUncheckedUpdateWithoutWebsiteInput>
    create: XOR<UsersCreateWithoutWebsiteInput, UsersUncheckedCreateWithoutWebsiteInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutWebsiteInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutWebsiteInput, UsersUncheckedUpdateWithoutWebsiteInput>
  }

  export type UsersUpdateWithoutWebsiteInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mail?: MailsUpdateOneWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutWebsiteInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mail?: MailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type SSLProvidersUpsertWithoutWebsitesInput = {
    update: XOR<SSLProvidersUpdateWithoutWebsitesInput, SSLProvidersUncheckedUpdateWithoutWebsitesInput>
    create: XOR<SSLProvidersCreateWithoutWebsitesInput, SSLProvidersUncheckedCreateWithoutWebsitesInput>
    where?: SSLProvidersWhereInput
  }

  export type SSLProvidersUpdateToOneWithWhereWithoutWebsitesInput = {
    where?: SSLProvidersWhereInput
    data: XOR<SSLProvidersUpdateWithoutWebsitesInput, SSLProvidersUncheckedUpdateWithoutWebsitesInput>
  }

  export type SSLProvidersUpdateWithoutWebsitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SSLProvidersUncheckedUpdateWithoutWebsitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SSLResultsUpsertWithWhereUniqueWithoutWebsiteInput = {
    where: SSLResultsWhereUniqueInput
    update: XOR<SSLResultsUpdateWithoutWebsiteInput, SSLResultsUncheckedUpdateWithoutWebsiteInput>
    create: XOR<SSLResultsCreateWithoutWebsiteInput, SSLResultsUncheckedCreateWithoutWebsiteInput>
  }

  export type SSLResultsUpdateWithWhereUniqueWithoutWebsiteInput = {
    where: SSLResultsWhereUniqueInput
    data: XOR<SSLResultsUpdateWithoutWebsiteInput, SSLResultsUncheckedUpdateWithoutWebsiteInput>
  }

  export type SSLResultsUpdateManyWithWhereWithoutWebsiteInput = {
    where: SSLResultsScalarWhereInput
    data: XOR<SSLResultsUpdateManyMutationInput, SSLResultsUncheckedUpdateManyWithoutWebsiteInput>
  }

  export type SSLResultsScalarWhereInput = {
    AND?: SSLResultsScalarWhereInput | SSLResultsScalarWhereInput[]
    OR?: SSLResultsScalarWhereInput[]
    NOT?: SSLResultsScalarWhereInput | SSLResultsScalarWhereInput[]
    id?: StringFilter<"SSLResults"> | string
    websiteId?: StringFilter<"SSLResults"> | string
    validFrom?: StringFilter<"SSLResults"> | string
    validTo?: StringFilter<"SSLResults"> | string
    fingerPrint?: StringFilter<"SSLResults"> | string
    serialNumber?: StringFilter<"SSLResults"> | string
    infoAccess?: JsonFilter<"SSLResults">
    createdAt?: DateTimeFilter<"SSLResults"> | Date | string
  }

  export type WebsitesCreateWithoutSslResultsInput = {
    id?: string
    link: string
    user: UsersCreateNestedOneWithoutWebsiteInput
    sslProvider?: SSLProvidersCreateNestedOneWithoutWebsitesInput
  }

  export type WebsitesUncheckedCreateWithoutSslResultsInput = {
    id?: string
    link: string
    userId: string
    sslProviderId?: string | null
  }

  export type WebsitesCreateOrConnectWithoutSslResultsInput = {
    where: WebsitesWhereUniqueInput
    create: XOR<WebsitesCreateWithoutSslResultsInput, WebsitesUncheckedCreateWithoutSslResultsInput>
  }

  export type WebsitesUpsertWithoutSslResultsInput = {
    update: XOR<WebsitesUpdateWithoutSslResultsInput, WebsitesUncheckedUpdateWithoutSslResultsInput>
    create: XOR<WebsitesCreateWithoutSslResultsInput, WebsitesUncheckedCreateWithoutSslResultsInput>
    where?: WebsitesWhereInput
  }

  export type WebsitesUpdateToOneWithWhereWithoutSslResultsInput = {
    where?: WebsitesWhereInput
    data: XOR<WebsitesUpdateWithoutSslResultsInput, WebsitesUncheckedUpdateWithoutSslResultsInput>
  }

  export type WebsitesUpdateWithoutSslResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutWebsiteNestedInput
    sslProvider?: SSLProvidersUpdateOneWithoutWebsitesNestedInput
  }

  export type WebsitesUncheckedUpdateWithoutSslResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sslProviderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersCreateWithoutMailInput = {
    id?: string
    username: string
    password: string
    createdAt?: Date | string
    website?: WebsitesCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutMailInput = {
    id?: string
    username: string
    password: string
    createdAt?: Date | string
    website?: WebsitesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutMailInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutMailInput, UsersUncheckedCreateWithoutMailInput>
  }

  export type UsersUpsertWithoutMailInput = {
    update: XOR<UsersUpdateWithoutMailInput, UsersUncheckedUpdateWithoutMailInput>
    create: XOR<UsersCreateWithoutMailInput, UsersUncheckedCreateWithoutMailInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutMailInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutMailInput, UsersUncheckedUpdateWithoutMailInput>
  }

  export type UsersUpdateWithoutMailInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    website?: WebsitesUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutMailInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    website?: WebsitesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WebsitesCreateWithoutSslProviderInput = {
    id?: string
    link: string
    user: UsersCreateNestedOneWithoutWebsiteInput
    sslResults?: SSLResultsCreateNestedManyWithoutWebsiteInput
  }

  export type WebsitesUncheckedCreateWithoutSslProviderInput = {
    id?: string
    link: string
    userId: string
    sslResults?: SSLResultsUncheckedCreateNestedManyWithoutWebsiteInput
  }

  export type WebsitesCreateOrConnectWithoutSslProviderInput = {
    where: WebsitesWhereUniqueInput
    create: XOR<WebsitesCreateWithoutSslProviderInput, WebsitesUncheckedCreateWithoutSslProviderInput>
  }

  export type WebsitesCreateManySslProviderInputEnvelope = {
    data: WebsitesCreateManySslProviderInput | WebsitesCreateManySslProviderInput[]
    skipDuplicates?: boolean
  }

  export type WebsitesUpsertWithWhereUniqueWithoutSslProviderInput = {
    where: WebsitesWhereUniqueInput
    update: XOR<WebsitesUpdateWithoutSslProviderInput, WebsitesUncheckedUpdateWithoutSslProviderInput>
    create: XOR<WebsitesCreateWithoutSslProviderInput, WebsitesUncheckedCreateWithoutSslProviderInput>
  }

  export type WebsitesUpdateWithWhereUniqueWithoutSslProviderInput = {
    where: WebsitesWhereUniqueInput
    data: XOR<WebsitesUpdateWithoutSslProviderInput, WebsitesUncheckedUpdateWithoutSslProviderInput>
  }

  export type WebsitesUpdateManyWithWhereWithoutSslProviderInput = {
    where: WebsitesScalarWhereInput
    data: XOR<WebsitesUpdateManyMutationInput, WebsitesUncheckedUpdateManyWithoutSslProviderInput>
  }

  export type WebsitesScalarWhereInput = {
    AND?: WebsitesScalarWhereInput | WebsitesScalarWhereInput[]
    OR?: WebsitesScalarWhereInput[]
    NOT?: WebsitesScalarWhereInput | WebsitesScalarWhereInput[]
    id?: StringFilter<"Websites"> | string
    link?: StringFilter<"Websites"> | string
    userId?: StringFilter<"Websites"> | string
    sslProviderId?: StringNullableFilter<"Websites"> | string | null
  }

  export type WebsitesCreateWithoutUserInput = {
    id?: string
    link: string
    sslProvider?: SSLProvidersCreateNestedOneWithoutWebsitesInput
    sslResults?: SSLResultsCreateNestedManyWithoutWebsiteInput
  }

  export type WebsitesUncheckedCreateWithoutUserInput = {
    id?: string
    link: string
    sslProviderId?: string | null
    sslResults?: SSLResultsUncheckedCreateNestedManyWithoutWebsiteInput
  }

  export type WebsitesCreateOrConnectWithoutUserInput = {
    where: WebsitesWhereUniqueInput
    create: XOR<WebsitesCreateWithoutUserInput, WebsitesUncheckedCreateWithoutUserInput>
  }

  export type WebsitesCreateManyUserInputEnvelope = {
    data: WebsitesCreateManyUserInput | WebsitesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MailsCreateWithoutUserInput = {
    id?: string
    mail: string
    createdAt?: Date | string
  }

  export type MailsUncheckedCreateWithoutUserInput = {
    id?: string
    mail: string
    createdAt?: Date | string
  }

  export type MailsCreateOrConnectWithoutUserInput = {
    where: MailsWhereUniqueInput
    create: XOR<MailsCreateWithoutUserInput, MailsUncheckedCreateWithoutUserInput>
  }

  export type WebsitesUpsertWithWhereUniqueWithoutUserInput = {
    where: WebsitesWhereUniqueInput
    update: XOR<WebsitesUpdateWithoutUserInput, WebsitesUncheckedUpdateWithoutUserInput>
    create: XOR<WebsitesCreateWithoutUserInput, WebsitesUncheckedCreateWithoutUserInput>
  }

  export type WebsitesUpdateWithWhereUniqueWithoutUserInput = {
    where: WebsitesWhereUniqueInput
    data: XOR<WebsitesUpdateWithoutUserInput, WebsitesUncheckedUpdateWithoutUserInput>
  }

  export type WebsitesUpdateManyWithWhereWithoutUserInput = {
    where: WebsitesScalarWhereInput
    data: XOR<WebsitesUpdateManyMutationInput, WebsitesUncheckedUpdateManyWithoutUserInput>
  }

  export type MailsUpsertWithoutUserInput = {
    update: XOR<MailsUpdateWithoutUserInput, MailsUncheckedUpdateWithoutUserInput>
    create: XOR<MailsCreateWithoutUserInput, MailsUncheckedCreateWithoutUserInput>
    where?: MailsWhereInput
  }

  export type MailsUpdateToOneWithWhereWithoutUserInput = {
    where?: MailsWhereInput
    data: XOR<MailsUpdateWithoutUserInput, MailsUncheckedUpdateWithoutUserInput>
  }

  export type MailsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MailsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SSLResultsCreateManyWebsiteInput = {
    id?: string
    validFrom: string
    validTo: string
    fingerPrint: string
    serialNumber: string
    infoAccess: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SSLResultsUpdateWithoutWebsiteInput = {
    id?: StringFieldUpdateOperationsInput | string
    validFrom?: StringFieldUpdateOperationsInput | string
    validTo?: StringFieldUpdateOperationsInput | string
    fingerPrint?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    infoAccess?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SSLResultsUncheckedUpdateWithoutWebsiteInput = {
    id?: StringFieldUpdateOperationsInput | string
    validFrom?: StringFieldUpdateOperationsInput | string
    validTo?: StringFieldUpdateOperationsInput | string
    fingerPrint?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    infoAccess?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SSLResultsUncheckedUpdateManyWithoutWebsiteInput = {
    id?: StringFieldUpdateOperationsInput | string
    validFrom?: StringFieldUpdateOperationsInput | string
    validTo?: StringFieldUpdateOperationsInput | string
    fingerPrint?: StringFieldUpdateOperationsInput | string
    serialNumber?: StringFieldUpdateOperationsInput | string
    infoAccess?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebsitesCreateManySslProviderInput = {
    id?: string
    link: string
    userId: string
  }

  export type WebsitesUpdateWithoutSslProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutWebsiteNestedInput
    sslResults?: SSLResultsUpdateManyWithoutWebsiteNestedInput
  }

  export type WebsitesUncheckedUpdateWithoutSslProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sslResults?: SSLResultsUncheckedUpdateManyWithoutWebsiteNestedInput
  }

  export type WebsitesUncheckedUpdateManyWithoutSslProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type WebsitesCreateManyUserInput = {
    id?: string
    link: string
    sslProviderId?: string | null
  }

  export type WebsitesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    sslProvider?: SSLProvidersUpdateOneWithoutWebsitesNestedInput
    sslResults?: SSLResultsUpdateManyWithoutWebsiteNestedInput
  }

  export type WebsitesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    sslProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    sslResults?: SSLResultsUncheckedUpdateManyWithoutWebsiteNestedInput
  }

  export type WebsitesUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    sslProviderId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use WebsitesCountOutputTypeDefaultArgs instead
     */
    export type WebsitesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WebsitesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SSLProvidersCountOutputTypeDefaultArgs instead
     */
    export type SSLProvidersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SSLProvidersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WebsitesDefaultArgs instead
     */
    export type WebsitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WebsitesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SSLResultsDefaultArgs instead
     */
    export type SSLResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SSLResultsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MailsDefaultArgs instead
     */
    export type MailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MailsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SSLProvidersDefaultArgs instead
     */
    export type SSLProvidersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SSLProvidersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}